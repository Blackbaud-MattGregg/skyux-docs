[
  {
    "id": "module:Action Bar",
    "longname": "module:Action Bar",
    "summary": "Combines a group of buttons into a dropdown at the XS breakpoint.",
    "name": "Action Bar",
    "kind": "module",
    "description": "The action bar is used to create a sky themed container for buttons. It has the option to collapse a group of buttons into a dropdown view when the screen is in xtra small mode.\n\n### Additional dependencies ###\n\n- None\n\n---\n\n### Included directives: ###\n\n    - `bb-action-bar` Wraps the content in the action bar.\n    - `bb-action-bar-item` Wraps given content in an action button. Any `ng-click` applied to this directive will be applied to the action button.\n    - `bb-action-bar-item-group` When placed around `bb-action-bar-item` directives, it will collapse those buttons into a dropdown in extra small mode. You can also pass an optional `bb-action-bar-item-group-title` as a label for the dropdown (by default it will be labeled \"Actions\").",
    "order": 0,
    "example-html": "<div ng-controller=\"ActionButtonBarTestController\">\n    <bb-action-bar>\n        <div class=\"row\">\n            <div class=\"col-xs-6 col-md-10\">\n                <bb-action-bar-item-group bb-action-bar-item-group-title=\"locals.actionsText\">\n                    <bb-action-bar-item ng-click=\"locals.action1()\">{{locals.action1Text}}</bb-action-bar-item>\n                    <bb-action-bar-item ng-if=\"locals.action2Visible\" ng-click=\"locals.action2()\">Action 2</bb-action-bar-item>\n                    <bb-action-bar-item ng-click=\"locals.action3()\">Action 3</bb-action-bar-item>\n                </bb-action-bar-item-group>\n            </div>\n            <div class=\"col-xs-6 col-md-2\">\n                <div class=\"pull-right\">\n                    <bb-action-bar-item ng-click=\"locals.rightAction1()\" >\n                        <span class=\"fa fa-angle-double-up\"></span>\n                    </bb-action-bar-item>\n                    <bb-action-bar-item ng-click=\"locals.rightAction2()\">\n                        <span class=\"fa fa-angle-double-down\"></span>\n                    </bb-action-bar-item>\n                </div>\n            </div>\n        </div>\n    </bb-action-bar>\n    <div class=\"clearfix\"/>\n    <div class=\"row\" style=\"padding-top: 5px;\">\n        <div class=\"col-md-6\">\n            <button type=\"button\" class=\"btn btn-primary\" ng-click=\"locals.action2Visible = !locals.action2Visible\">Toggle Action 2</button>\n        </div>\n    </div>\n</div>\n",
    "example-js": "/*global angular, alert*/\n(function () {\n    'use strict';\n    angular.module('stache')\n    .controller('ActionButtonBarTestController',\n        ['$scope', '$timeout', function ($scope, $timeout) {\n\n            $scope.locals = {\n                action1: function () {\n                    alert('Action 1');\n                },\n                action1Text: 'Action 1',\n                action2: function () {\n                    alert('Action 2');\n                },\n                action2Visible: true,\n                action3: function () {\n                    alert('Action 3');\n                },\n                rightAction1: function () {\n                    alert('Right Action 1');\n                },\n                rightAction2: function () {\n                    alert('Right Action 2');\n                },\n                actionsText: null\n            };\n\n            \n            $timeout(function () {\n                $scope.locals.actionsText = 'My actions';\n            }, 3000);\n            \n        }]);\n}());\n",
    "key": "actionbar",
    "icon": "bolt"
  },
  {
    "id": "module:Autofocus",
    "longname": "module:Autofocus",
    "summary": "The Autofocus directive is used to set focus on a form item when rendered.",
    "name": "Autofocus",
    "kind": "module",
    "description": "The bb-autofocus directive is used to set focus on a form item when rendered. Use this when the HTML autofocus property behaves finicky with things like angular dynamically loaded templates and such.\nHere focus is set in an in-page form as well as in a modal launched with bbmodal.",
    "order": 0,
    "example-html": "<div ng-controller=\"AutoFocusTestController\">\n    <button ng-click=\"open()\">Open</button>\n</div>",
    "example-js": "angular.module('stache').controller('AutoFocusTestController', ['bbModal', '$scope', function (bbModal, $scope) {\n\n    $scope.open = function () {\n        bbModal.open({\n            template: '<bb-modal>' +\n                      '<div class=\"modal-form\">' +\n                      '<bb-modal-header bb-modal-help-key=\"bb-security-users.html\">My Header</bb-modal-header>' +\n                      '<div bb-modal-body>' +\n                      '<input bb-autofocus/>' +\n                      '</div>' +\n                      '<bb-modal-footer>' +\n                      '<bb-modal-footer-button-primary></bb-modal-footer-button-primary>' +\n                      '<bb-modal-footer-button>Sample button</bb-modal-footer-button>' +\n                      '<bb-modal-footer-button-cancel></bb-modal-footer-button-cancel>' +\n                      '</bb-modal-footer>' +\n                      '</div>' +\n                      '</bb-modal>'\n        });\n    };\n\n}]);\n",
    "key": "autofocus",
    "icon": "camera"
  },
  {
    "id": "module:Autonumeric",
    "longname": "module:Autonumeric",
    "summary": "The Autonumeric directive wraps up the autoNumeric jQuery plugin. It allows for formatting any kind of number, including currency.",
    "name": "Autonumeric",
    "kind": "module",
    "description": "### Additional Dependencies ###\n\n - **[autoNumeric](http://www.decorplanit.com/plugin/) (1.9.27 or higher)** Used to format money values\n\n---\n\nThe Autonumeric directive wraps up the autoNumeric jQuery plugin.  It allows for formatting any kind of number, including currency.  This directive must be used in conjunction with the `ngModel` directive where the property bound to `ngModel` is the raw numeric value on your model.\n\n### Autonumeric Options ###\n\n - `bb-autonumeric` This  can optionally be assigned the name of a property from the `bbAutonumericConfig` object.  If none is specified, it defaults to `number`.\n - `bb-autonumeric-settings` This can be assigned a value that represents a settings object that can be passed to autoNumeric.  These options will override any default options specified in the `bb-autonumeric` attribute.  A complete list of options is available [here](http://www.decorplanit.com/plugin/).\n\n### Autonumeric Filter ###\n\nIn addition to the directive, there is also a filter that can be used to format numbers.  The filter has the added feature of optionally abbreviating a number according to Sky patterns.  For instance,\nnumbers over 10,000 will be displayed as 10k, over 1,000,000 as 1m, and 1,000,000,000 as 1b.  The filter takes three arguments:\n\n - `input` The value to format.\n - `configType` The name of the configuration (`number` or `money`) to apply to the value.\n - `abbreviate` A Boolean value indicating whether to abbreviate large numbers.",
    "order": 0,
    "example-html": "<div ng-controller=\"AutonumericInputTestController\">\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <div class=\"tile-form\">\n        <div class=\"form-group\">\n          <label for=\"autonumeric-money-{{$id}}\" class=\"control-label\">\n            <h4>Enter a money value.</h4>\n          </label>\n          <br />\n          <input type=\"text\" class=\"form-control\" id=\"autonumeric-money-{{$id}}\" ng-model=\"locals.moneyValue\" bb-autonumeric=\"money\" bb-autonumeric-settings=\"customSettings\" />\n          <a href=\"#\"></a>\n        </div>\n        <div class=\"clearfix\"></div>\n        <div>\n          Raw value: <strong>{{locals.moneyValue}}</strong>\n        </div>\n        <div>\n          May also be bound to a read-only element: <strong ng-model=\"locals.moneyValue\" bb-autonumeric=\"customOptions\" bb-autonumeric-money></strong>\n        </div>\n        <div>&nbsp;</div>\n        <div class=\"form-group\">\n          <label for=\"autonumeric-number-{{$id}}\" class=\"control-label\">\n            <h4>Enter a number value.</h4>\n          </label>\n          <br />\n          <input type=\"text\" class=\"form-control\" id=\"autonumeric-number-{{$id}}\" ng-model=\"locals.numberValue\" bb-autonumeric=\"number\" bb-autonumeric-settings=\"customSettings\" />\n          <a href=\"#\"></a>\n        </div>\n        <div class=\"clearfix\"></div>\n        <div>\n          Raw value: <strong>{{locals.numberValue}}</strong>\n        </div>\n        <div>\n          May also be bound to a read-only element: <strong ng-model=\"locals.numberValue\" bb-autonumeric=\"customOptions\" bb-autonumeric-money></strong>\n        </div>\n        <div class=\"clearfix\"></div>\n        <br />\n        <div class=\"form-group\">\n          <label class=\"control-label\">\n            <h4>Filter Example</h4>\n          </label>\n          <br />\n          <div>\n            Money value: <strong>{{locals.moneyValue | bbAutonumeric:'money'}}</strong>\n          </div>\n          <div>\n            Money value (abbreviated): <strong>{{locals.moneyValue | bbAutonumeric:'money':true}}</strong>\n          </div>\n          <br />\n          <div>\n            Number value: <strong>{{locals.numberValue | bbAutonumeric}}</strong>\n          </div>\n          <div>\n            Number value (abbreviated): <strong>{{locals.numberValue | bbAutonumeric:'number':true}}</strong>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>",
    "example-js": "angular.module('stache')\n    .config(['bbAutonumericConfig', function (bbAutonumericConfig) {\n        // Globally override money options for the entire application here.\n        bbAutonumericConfig.money.aSep = ',';\n    }])\n    .controller('AutonumericInputTestController', ['$scope', function ($scope) {\n        $scope.locals = {\n            moneyValue: 12345678,\n            numberValue: 87654321,\n            customSettings: {\n                // Options may also be overridden here on a one-off basis.\n                aSign: '$'\n            }\n        };\n    }]);\n",
    "key": "autonumeric",
    "icon": "calculator"
  },
  {
    "id": "module:Check",
    "longname": "module:Check",
    "summary": "The bbCheck directive allows you to change an input element of type checkbox or radio into a commonly styled selector.",
    "name": "Check",
    "kind": "module",
    "description": "### Additional Dependencies ###\n\n - **[icheck.js](http://fronteed.com/iCheck/) (1.0.2 or higher)**\n\n---\n\nThe bbCheck directive allows you to change an input element of type checkbox or radio into a commonly styled selector.  The value that is selected is driven through the ngModel attribute specified on the input element and for radio input types the value to set on the ngModel can be specified by the value attribute.",
    "order": 0,
    "example-html": "<div class=\"row\" ng-controller=\"CheckTestController\">\n    <div class=\"col-sm-6\">\n        <label>Checkboxes:</label>\n        <div ng-repeat=\"checkBoxItem in locals.checkBoxItems\" class=\"m-b-xs\">\n            <label>\n                <input bb-check type=\"checkbox\" ng-model=\"checkBoxItem.checked\" ng-disabled=\"checkBoxItem.disabled\">\n                {{checkBoxItem.description}}\n            </label>\n        </div>\n        <div class=\"m-t-sm\">\n            <label>Scope state:</label>\n            <ul>\n                <li ng-repeat=\"checkBoxItem in locals.checkBoxItems\">{{checkBoxItem.description}}: {{checkBoxItem.checked}}</li>\n            </ul>\n        </div>\n    </div>\n    <div class=\"col-sm-6\">\n        <label>Radio buttons:</label>\n        <div ng-repeat=\"radioItem in locals.radioItems\" class=\"m-b-xs\">\n            <label>\n                <input bb-check type=\"radio\" ng-model=\"locals.selectedRadioItem\" ng-value=\"radioItem.id\" ng-disabled=\"radioItem.disabled\">\n                {{radioItem.description}}\n            </label>\n        </div>\n        <div class=\"m-t-sm\">\n            <label>Scope state:</label>\n            <ul>\n                <li>Radio selected: {{locals.selectedRadioItem}}</li>\n            </ul>\n        </div>\n    </div>\n</div>\n",
    "example-js": "/*global angular */\n\nangular.module('stache')\n    .controller('CheckTestController', ['$scope', function ($scope) {\n        'use strict';\n\n        var checkBoxItems,\n            radioItems;\n\n        checkBoxItems = [\n            { description: 'Checkbox 1', checked: false, disabled: false },\n            { description: 'Checkbox 2', checked: true, disabled: false },\n            { description: 'Disabled', checked: false, disabled: true },\n            { description: 'Disabled and checked', checked: true, disabled: true }\n        ];\n\n        radioItems = [\n            { id: 1, description: 'Option 1', disabled: false },\n            { id: 2, description: 'Option 2', disabled: false },\n            { id: 3, description: 'Option 3', disabled: false },\n            { id: 4, description: 'Disabled', disabled: true }\n        ];\n        $scope.locals = {\n            checkBoxItems: checkBoxItems,\n            radioItems: radioItems,\n            selectedRadioItem: radioItems[1].id\n        };\n    }]);\n",
    "key": "check",
    "icon": "check-square"
  },
  {
    "id": "module:Checklist",
    "longname": "module:Checklist",
    "summary": "The Checklist directive allows you to easily build a filterable checkbox list.",
    "name": "Checklist",
    "kind": "module",
    "description": "The Checklist directive allows you to easily build a filterable checkbox list.  Multiple columns of data can be provided for the checkbox rows using the `bb-checklist-column` tag.\n\n### Checklist Settings ###\n\n - `bb-checklist-items` An array of objects representing the rows that will be shown in the list.\n - `bb-checklist-selected-items` An array representing the selected items in the list.\n - `bb-checklist-include-search` A boolean to optionally include a search textbox for filtering the items.  The search text will be highlighted in the columns of the list.  A callback function can be used to filter the items based on the search text.\n - `bb-checklist-search-placeholder` Placeholder text for the search textbox.\n - `bb-checklist-filter-callback` A function to be called when the search text is modified.  Used by the consumer to update the `bb-checklist-items` array as desired based on the search text.  The function will be passed a single object as a parameter containing `searchText` and `category` properties.  Useful when loading items remotely or using custom logic other than simple case-insensitive string matching to filter items.\n - `bb-checklist-filter-local` When specified, items are filtered by the `bbChecklist` directive by examining the properties of each item to match the specified category or search text.\n - `bb-checklist-search-debounce` Number of milliseconds to debounce changes to the search text.  Useful if making a web request in the `bb-checklist-filter-callback` to avoid making the request after every character typed.\n - `bb-checklist-no-items-message` *(Default: `'No items found'`)* Message to display when no items are in the list.\n - `bb-checklist-mode` *(Optional. Default: 'grid')* one of two possible values:\n  - `grid` Displays items in a grid with any number of columns.  Columns are specified using the `bbChecklistColumn` directive.\n  - `list` Displays items in a list with a title and description.  Items are expected to have `title`, `description` and `category` properties.\n - `bb-checklist-categories` An array of category names used to build category filter buttons at the top of the list.\n\n### Checklist Column Settings ###\n\n - `bb-checklist-column-caption` Caption text for the column header.\n - `bb-checklist-column-field` The name of the property on the checklist items that contains the text to display in this column.\n - `bb-checklist-column-class` A CSS class to apply to this column's header and cells.\n - `bb-checklist-column-width` Set the width to be used by the column.",
    "order": 0,
    "example-html": "<div ng-controller=\"ChecklistTestController\">\n    <h3>Grid example</h3>\n    <bb-checklist \n                  bb-checklist-items=\"locals.items\" \n                  bb-checklist-selected-items=\"locals.selectedItems\" \n                  bb-checklist-filter-callback=\"locals.onSearch\" \n                  bb-checklist-include-search=\"locals.includeSearch\" \n                  bb-checklist-search-placeholder=\"Search for columns\" \n                  bb-checklist-no-items-message=\"'No columns found'\"\n                  >\n        <bb-checklist-columns>\n            <bb-checklist-column \n                                 bb-checklist-column-caption=\"'Column Name'\" \n                                 bb-checklist-column-field=\"'column'\" \n                                 bb-checklist-column-width=\"'30%'\"\n                                 >\n            </bb-checklist-column>\n            <bb-checklist-column \n                                 bb-checklist-column-caption=\"'Column Description'\" \n                                 bb-checklist-column-field=\"'description'\" \n                                 bb-checklist-column-width=\"'70%'\"\n                                 >\n            </bb-checklist-column>\n        </bb-checklist-columns>\n    </bb-checklist>\n\n    <label>\n        <input type=\"checkbox\" ng-model=\"locals.includeSearch\" /> Include searchbox\n    </label>\n    <br>\n    <hr>\n    <br>\n\n    <div>\n        <label>Selected items:</label>\n        <ul>\n            <li ng-repeat=\"item in locals.selectedItems\">{{item.column}}</li>\n        </ul>\n    </div>\n\n    <h3>List example</h3>\n    \n    <bb-checklist \n                  bb-checklist-items=\"locals.listItems\" \n                  bb-checklist-selected-items=\"locals.selectedListItems\" \n                  bb-checklist-include-search=\"locals.includeSearch\" \n                  bb-checklist-search-placeholder=\"Search for columns\" \n                  bb-checklist-no-items-message=\"No columns found\" \n                  bb-checklist-categories=\"['Constituent', 'Giving', 'Miscellaneous']\" \n                  bb-checklist-mode=\"list\" \n                  bb-checklist-filter-local\n                  >\n    </bb-checklist>\n\n    <div>\n        <label>Selected items:</label>\n        <ul>\n            <li ng-repeat=\"item in locals.selectedListItems\">{{item.title}}</li>\n        </ul>\n    </div>\n\n</div>",
    "example-js": "/* global angular */\n(function () {\n    'use strict';\n    angular.module('stache')\n    .controller('ChecklistTestController', ['$scope', function ($scope) {\n        var locals,\n            items,\n            listItems;\n\n        function loadItems(searchText) {\n            var filteredItems = [],\n                i;\n\n            for (i = 0; i < items.length; i++) {\n                if (!searchText || items[i].column.toLowerCase().indexOf(searchText.toLowerCase()) >= 0 || items[i].description.toLowerCase().indexOf(searchText.toLowerCase()) >= 0) {\n                    filteredItems.push({ column: items[i].column, description: items[i].description });\n                }\n            }\n\n            locals.items = filteredItems;\n        }\n\n        items = [\n            { column: 'Constituent summary', description: 'Summary information about the constituent who gave the gift' },\n            { column: 'Soft credits', description: 'Soft credits for the gift' },\n            { column: 'Amount', description: 'Amount of the gift' }\n        ];\n        \n        listItems = [\n            {\n                title: 'Constituent summary',\n                description: 'Summary information about the constituent who gave the gift',\n                category: 'Constituent'\n            },\n            {\n                title: 'Soft credits',\n                description: 'Soft credits for the gift',\n                category: 'Giving'\n            },\n            {\n                title: 'Amount',\n                description: 'Amount of the gift',\n                category: 'Giving'\n            },\n            {\n                title: 'Sweatshirt',\n                description: 'This column has nothing to do with the other ones',\n                category: 'Miscellaneous'\n            }\n        ];\n\n        $scope.locals = locals = {\n            selectedItems: [],\n            includeSearch: true,\n            listItems: listItems,\n            onSearch: function (args) {\n                loadItems(args.searchText);\n            }\n        };\n\n        loadItems();\n    }]);\n\n}());\n",
    "key": "checklist",
    "icon": "list-ul"
  },
  {
    "id": "module:Context Menu",
    "longname": "module:Context Menu",
    "summary": "The context menu directives allow you to easily create dropdowns styled with the sky context menu.",
    "name": "Context Menu",
    "kind": "module",
    "description": "The context menu directives allow you to easily create [dropdowns](https://angular-ui.github.io/bootstrap/#/dropdown) styled with the sky context menu. There are 3 directives in the context menu module: \n  - `bb-context-menu` creates a dropdown with the context menu button.\n  - `bb-context-menu-item` creates dropdown menu items within a dropdown that execute `bb-context-menu-action` on click.\n  - `bb-context-menu-button` creates a button with the sky context menu styles.",
    "order": 0,
    "example-html": "<div ng-controller=\"ContextMenuTestController as MenuController\">\n    <div>\n        <p>\n            <span>You can use</span> <code>bb-context-menu-item</code> <span>with</span> <code>bb-context-menu</code> <span>for simple dropdowns.</span>\n        </p>\n        <bb-context-menu>\n            <bb-context-menu-item ng-repeat=\"item in MenuController.items\" bb-context-menu-action=\"item.onClick()\">{{item.text}}</bb-context-menu-item>\n        </bb-context-menu>\n    </div>\n    \n    <div>\n         <p>\n            <span>For more complicated dropdowns you can use</span> <code>bb-context-menu</code> <span>with your own dropdown list items or</span> <code>bb-context-menu-button</code> <span> to build a custom bootstrap dropdown using the sky styled context menu button.</span>\n        </p>\n        <div style=\"margin-bottom: 10px;\">\n             <bb-context-menu>\n                <li role=\"presentation\">\n                    <a role=\"menuitem\" href=\"javascript:void(0)\" ng-click=\"MenuController.alert('action above')\">Action Above</a>\n                </li>\n                <li class=\"divider\"></li>\n                <li class=\"disabled\" role=\"presentation\">\n                    <a role=\"menuitem\" href=\"javascript:void(0)\" ng-click=\"MenuController.alert('action below')\">Action Below</a>\n                </li>\n            </bb-context-menu>\n        </div>\n        <div>\n            <button type=\"button\" class=\"btn btn-primary\" ng-click=\"MenuController.openDropdown($event)\" style=\"margin-bottom: 10px;\">Open 3rd Menu</button>\n    \n            <div class=\"bb-context-menu\" dropdown is-open=\"MenuController.isOpen\">\n                <bb-context-menu-button dropdown-toggle></bb-context-menu-button>\n                <ul class=\"dropdown-menu\" role=\"menu\">\n                    <li role=\"presentation\">\n                        <a role=\"menuitem\" href=\"javascript:void(0)\" ng-click=\"MenuController.alert('action a')\">Action A</a>\n                    </li>\n            \n                    <li role=\"presentation\">\n                        <a class=\"disabled\" role=\"menuitem\" href=\"javascript:void(0)\" ng-click=\"MenuController.alert('action b')\">Action B</a>\n                    </li>\n            \n                    <li class=\"divider\"></li>\n            \n                    <li role=\"presentation\">\n                        <a class=\"disabled\" role=\"menuitem\" href=\"javascript:void(0)\" ng-click=\"MenuController.alert('action c')\">Action C</a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
    "example-js": "/* global angular, alert */\n(function () {\n    'use strict';\n    \n    function ContextMenuTestController() {\n        var self = this;\n        \n        self.items = [\n            {\n                onClick: function () {\n                    alert('click 1');\n                },\n                text: 'Item 1'\n            },\n            {\n                onClick: function () {\n                    alert('click 2');\n                },\n                text: 'Item 2'\n            },\n            {\n                onClick: function () {\n                    alert('click 3');\n                },\n                text: 'Item 3'\n            }\n            \n        ];\n        \n        self.alert = function (item) {\n            alert(item);\n        };\n        \n        self.isOpen = false;\n        \n        self.openDropdown = function ($event) {\n            $event.preventDefault();\n            $event.stopPropagation();\n            self.isOpen = true;\n        };\n        \n    }\n    angular.module('stache')\n        .controller('ContextMenuTestController', ContextMenuTestController);\n    \n}());",
    "key": "contextmenu",
    "icon": "ellipsis-h"
  },
  {
    "id": "module:Data",
    "longname": "module:Data",
    "summary": "The bbData service gives you access to convenience functions for manipulating data.",
    "name": "Data",
    "kind": "module",
    "description": "The bbData service gives you access to convenience functions for manipulating data.\n\n### bbData functions ###\n\n  - `load(loadObj)` Takes an object with a data, resources, and text property and returns a promise that contains the result of a HTTP GET request using the urls stored within. The argument object has the following properties: \n    - `data` Either a url or an object with multiple urls to send a HTTP request to, the promise results will be contained in `result.data`. e.g. `bbData.load({data: '/foo/data'})` or `bbData.load({data: {a: '/foo/data1', b: '/foo/data2'}})`\n    - `resources` Either a url or an object with multiple urls to send a HTTP request to, the promise results will be contained in `result.resources`. \n    - `text` Either a url or an object with multiple urls to send a HTTP request to, the promise results will be contained in `result.text`.\n    - `loadManager` an object with a `name` and `scope` property which creates a wait while it and its child load managers retreive data. \n  - `query(url, queryParams)` Creates a query string based on an the queryParam's properties. e.g. `bbData.query('/foo/search', {x: 'y', z: 123});` \n  - `post(url, data)` For use within bbData.load, creates a post request from a url and data object. e.g. `bbData.load({data: bbData.post('/foo/post', postData)});` \n  - `save(saveObj)` A function that issues an HTTP request. Takes an argument with the following properties:\n    - `url` The url to send the request to\n    - `data` The data object to send along with the request\n    - `type` The HTTP verb that the request should be sent as",
    "order": 0,
    "example-html": "<div ng-controller=\"DataTestController as dataController\">\n    <button type=\"button\" class=\"btn btn-primary\" ng-click=\"dataController.getFoo()\">Get Foo</button>\n    <div>Returned foo data is {{dataController.data.foo}}</div>\n    <div>Returned resource data is {{dataController.resources.name}}</div>\n</div>",
    "example-js": "/* global angular */\n(function () {\n    'use strict';\n    \n    function DataTestController(bbData) {\n        var self = this;\n        \n        self.getFoo = function () {\n            bbData.load(\n                {\n                    data: '/sampledata/foo.json',\n                    resources: '/sampledata/resources.json'\n                }\n            ).then(function (result) {\n                self.data = result.data;\n                self.resources = result.resources;\n            });\n\n        };\n    }\n    \n    DataTestController.$inject = ['bbData'];\n    \n    angular.module('stache')\n        .controller('DataTestController', DataTestController);\n}());",
    "key": "data",
    "icon": "database"
  },
  {
    "id": "module:Datefield",
    "longname": "module:Datefield",
    "summary": "The DateField directive allows you to use a common textbox with calendar picker for choosing a date.",
    "name": "Datefield",
    "kind": "module",
    "description": "### *Deprecated* ###\n\n This directive is no longer being maintained. For showing a date popup and input, see the [Datepicker](../datepicker) directive.\n\n <s>\n ### Additional Dependencies ###\n\n - **[bootstrap-datepicker.js](https://libraries.io/bower/bootstrap-datepicker-eyecon) (1.0.0 or higher)**\n\n---\n\nThe DateField directive allows you to use a common textbox with calendar picker for choosing a date.  Values entered into the textbox manually will be validated and cleaned up for date formatting.\n\n### Date Field Settings ###\n\n - `ng-model` An object to bind the date value in and out of the date field.\n - `bb-date-field-options` Optional.  An options object for customizing the date field.\n\n\n### Date Field Options ###\n - `formatValue` Optional.  A function that will be called when text is entered directly into the textbox.  The only paramter to the function will be the raw value of the textbox.  The function should return an object or a promise of an object with properties of `formattedValue` and optionally `formattingErrorMessage` if there was a problem when trying to format the input value.\n </s>",
    "deprecated": true,
    "order": 0,
    "example-html": "<div ng-controller=\"DateFieldDemoController\">\n    <form name=\"testform\" novalidate>\n        <div class=\"row\">\n            <div class=\"col-md-6 col-xs-12\">\n                <div class=\"form-group\">\n                    <label>Date Field</label>\n                    <bb-date-field name=\"testDate1\"\n                            required\n                            ng-model=\"testdate1\"></bb-date-field>\n\n                    <label class=\"error\">{{testform.testDate1.invalidFormatMessage}}</label>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-6 col-xs-12\">\n                <div class=\"form-group\">\n                    <label>Date Field - Custom Formatting</label>\n                    <bb-date-field name=\"testDate2\"\n                            required\n                            id=\"yoMom\"\n                            ng-model=\"testdate2\"\n                            bb-date-field-options=\"dateFieldOptions\"></bb-date-field>\n<div class=\"col-md-6 col-xs-12\"> \n                {{testdate2}}\n            </div>\n                    <label class=\"error\">{{testform.testDate2.invalidFormatMessage}}</label>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>",
    "example-js": "/*global angular */\n(function () {\n    'use strict';\n    angular.module('stache')\n    .controller('DateFieldDemoController', ['$scope', '$q', function ($scope, $q) {\n\n        // Initial values...\n        $scope.testdate1 = \"05282015\";\n        \n        $scope.testdate2 = \"02/05/2003\";\n\n        // Custom date formatting method\n        $scope.dateFieldOptions = {\n            formatValue: function (value) {\n                return $q(function (resolve) {\n                    var formattedValue = value,\n                        formattingErrorMessage;\n\n                    if (value.toUpperCase() !== value) {\n                        formattingErrorMessage = \"Any letters should be capitalized.\";\n                    } else {\n                        formattedValue = \"[\" + value.toUpperCase() + \"]\";\n                    }\n                    resolve({\n                        formattedValue: formattedValue,\n                        formattingErrorMessage: formattingErrorMessage\n                    });\n                });\n            }\n        };\n\n        $scope.open = function ($event) {\n            $event.preventDefault();\n            $event.stopPropagation();\n            \n            $scope.locals.opened = !$scope.locals.opened;\n        };\n        \n        $scope.locals = {\n            opened: false,\n            customFormat: function () {\n                return false;  \n            },\n            date: '',\n            dt: new Date(),\n            formats: ['dd-MMMM-yyyy', 'MM/dd/yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'],\n            format: 'dd-MMMM-yyyy'\n        };\n        \n    }]);\n\n}());\n",
    "key": "datefield",
    "icon": "bell-o"
  },
  {
    "id": "module:Datepicker",
    "longname": "module:Datepicker",
    "summary": "The bb-datepicker directive wraps the ui.bootstrap.datepicker directive from angular ui bootstrap.",
    "name": "Datepicker",
    "kind": "module",
    "description": "The `bb-datepicker` directive wraps the ui.bootstrap.datepicker directive from [angular ui bootstrap](https://angular-ui.github.io/bootstrap/). It creates a input text box and a calendar picker for choosing the date.\n\n## Datepicker settings\n  - `bb-custom-validation` an object containing the following:\n    - `formatValue` A function that will be called when text is entered directly into the textbox. The only parameter to the function will be the raw value of the textbox. The function should return an object or a promise of an object with properties of `formattedValue` and optionally `formattingErrorMessage` if there was a problem when trying to format the input value.\n  - `bb-date-format` The format string that the date should display as in the input text box. This will override the default set in the `bbDatepickerConfig` `currentCultureDateFormatString` property. The default format in sky is set as `MM/dd/yyyy`. The format string should be set up like the [angular](https://docs.angularjs.org/api/ng/filter/date) date filter format strings.\n  - `bb-date-options` Options object for customizing the datepicker. The options included are all of those valid for the angular ui bootstrap `datepicker-options` object. You can set application defaults for the `showWeeks` and `startingDay` properties of the angular ui bootstrap datepicker in the `bbDatepickerConfig` constant defined in `sky.datepicker`. In sky the default for `showWeeks` is false and `startingDay` is 0 unless overridden in `bbDatepickerConfig`.\n  - `bb-datepicker-name` This value gets bound to the `name` attribute of the datepicker input for use in validation and form submission.\n  - `close-on-date-selection` *(Default: true):*  Whether to close calendar when a date is chosen.\n  - `datepicker-append-to-body` *(Default: false):*  Append the datepicker popup element to `body`, rather than inserting after the datepicker input.\n  - `max-date` A Javascript Date object that can set a maximum date for the datepicker control and input. Input validation will be bound to `$scope.myFormName.inputName.$error.maxDate`. This value can also be set globally in the `bbDatepickerConfig` object property `maxDate`.\n  - `min-date` A Javascript Date object that can set a minimum date for the datepicker control and input. Input validation will be bound to `$scope.myFormName.inputName.$error.minDate`. This value can also be set globally in the `bbDatepickerConfig` object property `minDate`.\n  - `ng-model` An object to bind the date value in and out of the datepicker. This will be set to a Javascript Date object when set or parsed from the bootstrap datepicker.\n  - `placeholder` overrides the default placeholder text of the `bb-datepicker` input\n  - `required` Attribute present if the `bb-datepicker` value is required.\n  - `show-button-bar` *(Default: false):*  Whether to display a button bar underneath the datepicker. (see angular ui bootstrap datepicker)\n\n## Validation\n`bb-datepicker` sets validation on the datepicker input using `bb-datepicker-name` for the input name, and the validity of the date entered in the input is in the `dateFormat` validator. So if you want to see if the date value is valid, you can access this through `$scope.myFormName.inputName.$error.dateFormat`. The error message for an invalid date will be in `$scope.myFormName.inputName.invalidFormatMessage`.",
    "order": 0,
    "example-html": "<div ng-controller=\"DatepickerDemoController\">\n    <form name=\"testform\" novalidate>\n        \n        <div class=\"row\">\n            <div class=\"col-md-6 col-xs-12\"> \n                <label>Date Field</label>\n                <bb-datepicker min-date=\"locals.minDate\" max-date=\"locals.maxDate\" bb-datepicker-name=\"date2\" ng-model=\"locals.date2\" placeholder=\"locals.placeholder\"></bb-datepicker>\n                <label class=\"error\" ng-show=\"testform.date2.$error.dateFormat\">{{testform.date2.invalidFormatMessage}}</label>\n                <label class=\"error\" ng-show=\"testform.date2.$error.minDate\">Date is prior to minimum date range</label>\n                <label class=\"error\" ng-show=\"testform.date2.$error.maxDate\">Date is after maximum date range</label>\n                <label class=\"error\" ng-show=\"testform.date2.$error.required && testform.date2.$touched\">Date is required</label>\n            </div>\n            <div class=\"col-md-6 col-xs-12\"> \n                <label>Date Value</label>\n                <div>{{locals.date2}}</div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-6 col-xs-12\">\n                <button class=\"btn btn-primary\"  style=\"margin-top: 5px; margin-bottom: 5px;\" type=\"button\" ng-click=\"locals.setDate()\">Set date</button>\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <div class=\"col-md-6 col-xs-12\"> \n                <label>Date Field - Custom Formatting</label>\n                <bb-datepicker bb-datepicker-name=\"date1\" ng-model=\"locals.date1\" ng-required=\"true\" bb-custom-validation=\"locals.customFormat\"></bb-datepicker>\n                <label class=\"error\" ng-show=\"testform.date1.$error.dateFormat\">{{testform.date1.invalidFormatMessage}}</label>\n                <label class=\"error\" ng-show=\"testform.date1.$error.required && testform.date1.$touched\">Date is required</label>\n            </div>\n            <div class=\"col-md-6 col-xs-12\"> \n                <label>Date Value</label>\n                <div>{{locals.date1}}</div>\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <div class=\"col-md6 col-xs-12\">\n                <button class=\"btn btn-primary\" style=\"margin-top: 5px; margin-bottom: 5px;\" type=\"button\" ng-click=\"locals.openModal()\">Open Datepicker Modal</button>\n            </div>\n        </div>\n    </form>\n</div>\n\n<script type=\"text/ng-template\" id=\"demo/datepicker/datepickermodal.html\">\n    <bb-modal>\n        <div class=\"modal-form\">\n            <bb-modal-header >Modal Datepicker</bb-modal-header>\n            <div bb-modal-body>\n                <form name=\"datepickerModal\" novalidate>\n                    <div class=\"row\">\n                        <div class=\"col-md-6 col-xs-12\"> \n                            <label>Date Field</label>\n                                <bb-datepicker bb-datepicker-name=\"date2\" ng-model=\"locals.date\" ng-required=\"true\" bb-date-format=\"'dd/MM/yyyy'\" datepicker-append-to-body=\"true\"></bb-datepicker>\n                                <label class=\"error\" ng-show=\"datepickerModal.date2.$error.dateFormat\">{{datepickerModal.date2.invalidFormatMessage}}</label>\n                                <label class=\"error\" ng-show=\"datepickerModal.date2.$error.required && datepickerModal.date2.$touched\">Date is required</label>\n                        </div>\n                        <div class=\"col-md-6 col-xs-12\"> \n                            <label>Date Value</label>\n                            <div>{{locals.date}}</div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <bb-modal-footer>\n                <bb-modal-footer-button-primary ng-disabled=\"datepickerModal.$invalid\"></bb-modal-footer-button-primary>\n                <bb-modal-footer-button>Sample button</bb-modal-footer-button>\n                <bb-modal-footer-button-cancel></bb-modal-footer-button-cancel>\n            </bb-modal-footer>\n        </div>\n    </bb-modal>\n</script>",
    "example-js": "/*global angular */\n(function () {\n    'use strict';\n    angular.module('stache')\n        .controller('DatepickerModalController', ['$scope', function ($scope) {\n            $scope.locals = {\n                date: ''\n            };\n        \n        }])\n        .controller('DatepickerDemoController', ['$scope', 'bbModal', '$q', function ($scope, bbModal, $q) {\n            // Custom date formatting method\n            function formatValue(value) {\n                return $q(function (resolve) {\n                    var formattedValue = value,\n                        formattingErrorMessage;\n\n                    if (value.toUpperCase() !== value) {\n                        formattingErrorMessage = \"Any letters should be capitalized.\";\n                    } else {\n                        formattedValue = \"[\" + value.toUpperCase() + \"]\";\n                    }\n                   \n                    resolve({\n                        formattedValue: formattedValue,\n                        formattingErrorMessage: formattingErrorMessage\n                    });\n                });\n            }\n            \n            function openModal() {\n                bbModal.open({\n                    controller: 'DatepickerModalController',\n                    templateUrl: 'demo/datepicker/datepickermodal.html'\n                });\n            }\n            \n            $scope.locals = {\n                openModal: openModal,\n                setDate: function () {\n                    $scope.locals.date2 = '5/22/2014';  \n                },\n                customFormat: {\n                    formatValue: formatValue\n                },\n                date1: '2015-05-28T00:00:00',\n                placeholder: 'Your date here',\n                minDate: new Date('5/21/2014'),\n                maxDate: new Date('2/10/2016')\n            };   \n        }]);\n}());",
    "key": "datepicker",
    "icon": "calendar-o"
  },
  {
    "id": "module:Daterangepicker",
    "longname": "module:Daterangepicker",
    "summary": "The DateRangePicker directive allows you to easily choose a date range from a well-known set of options.",
    "name": "Daterangepicker",
    "kind": "module",
    "description": "The DateRangePicker directive allows you to easily choose a date range from a well-known set of options.  A DateRangePicker service also exists to work hand-in-hand with the directive to provide more service-oriented functionality.\n\n### Date Range Picker Settings ###\n\n - `bb-date-range-picker-value` An object tracking the value of the date range picker control.  Right now, the only proeprty of the object is `.dateRangeType` gives you the integer (ENUM) value of the date range typ that was selected in the picker.  See the DateRangePicker service for details of this ENUM.\n - `bb-date-range-picker-automation-id` A string to use when creating the bb-auto-field attribute on elements in the date range picker\n - `bb-date-range-picker-options` Optional. An options object that can be provided to customize the behavior of the date range picker.\n\n### Date Range Picker Options Settings ###\n\n - `availableDateRangeTypes` Optional. An array of integers (`dateRangeTypes` ENUM) to specify the ordered list of date range types to be included in the dropdown.  Common variations can be found in the DateRangePicker service.\n\n### Date Range Picker Service ###\nThis service provides additional functionality that works closely with the directive.  Below are a list of members provided by the service.\n\n - `dateRangeTypes` An ENUM of all types of date ranges that are understood by the DateRangePicker and can be available in the dropdown.\n - `defaultDateRangeOptions` An array of `dateRangeTypes` providing the default order and set of date range types that are included in the dropdown.\n - `pastDateRangeOptions` An array of `dateRangeTypes` that are appropriate for filtering for things that have occurred in the past.  For example, you wouldn't want to be able to search for items created 'next month'.\n - `getDateRangeTypeCaption` A function for getting the caption of the dropdown item selected for a given `bb-date-range-picker-value`.\n - `getDateRangeFilterDescription` A function for getting an appropriate description string explaining the meaning of a given `bb-date-range-picker-value`.",
    "order": 0,
    "example-html": "<div ng-controller=\"DateRangePickerDemoController\">\n    <div class=\"form-group\">\n        <label>Date Range Picker</label>\n        <bb-date-range-picker bb-date-range-picker-value=\"locals.dateRangePickerValue\"\n                              bb-date-range-picker-options=\"locals.dateRangePickerOptions\"\n                              bb-date-range-picker-automation-id=\"'DirectiveDemo'\"></bb-date-range-picker>\n\n        The selected dateRangeType is: <b>'{{locals.dateRangePickerValue.dateRangeType}}'</b>.\n        <br />\n        The type captions is: <b>'{{locals.bbDateRangePicker.getDateRangeTypeCaption(locals.dateRangePickerValue)}}'</b>.\n        <br />\n        The type filter description is: <b>'{{locals.bbDateRangePicker.getDateRangeFilterDescription(locals.dateRangePickerValue)}}'</b>.\n\n        <br /><br />\n        <button ng-click=\"selectToday()\">Select today</button>\n        <br />\n        <button ng-click=\"reset()\">Reset</button>\n        <br />\n        <label>\n            <input type=\"checkbox\" ng-model=\"locals.options.pastonly\" /> Past items filter\n        </label>\n\n    </div>\n</div>",
    "example-js": "angular.module('stache')\n    .controller('DateRangePickerDemoController', ['$scope', 'bbDateRangePicker', function ($scope, bbDateRangePicker) {\n\n        var locals = $scope.locals = {\n            bbDateRangePicker: bbDateRangePicker,\n            dateRangePickerValue: {\n                dateRangeType: bbDateRangePicker.dateRangeTypes.TOMORROW\n            },\n            dateRangePickerOptions: {}\n        };\n\n        $scope.selectToday = function () {\n            locals.dateRangePickerValue = {\n                dateRangeType: bbDateRangePicker.dateRangeTypes.TODAY\n            };\n        };\n\n        $scope.reset = function () {\n            locals.dateRangePickerValue = {};\n        };\n\n        $scope.$watch('locals.options.pastonly', function (newVal) {\n            if (newVal === true) {\n                locals.dateRangePickerOptions.availableDateRangeTypes = bbDateRangePicker.pastDateRangeOptions;\n            } else {\n                locals.dateRangePickerOptions.availableDateRangeTypes = bbDateRangePicker.defaultDateRangeOptions;\n            }\n        });\n\n    }]);\n",
    "key": "daterangepicker",
    "icon": "calendar"
  },
  {
    "id": "module:File attachments",
    "longname": "module:File attachments",
    "summary": "The file attachments module contains two directives to make it easier to add multiple files to a form.",
    "name": "File attachments",
    "kind": "module",
    "description": "The file attachments module contains two directives to make it easier to add multiple files to a form.\nThe `bb-file-drop` directive provides an element that can both be clicked to select a file from the user's\nlocal drive or serve as a drop zone where files can be dragged from the user's local drive.  The directive can\nalso optionally display controls for the user to add a hyperlink to a file on the web.\n\nThe contents of the directive may be left blank to display the default UI for the drop zone, or you may include your\nown custom content to be displayed instead of the default UI.\n\n### File Drop Settings ###\n\n- `bb-file-drop-accept` *(Optional)* A comma-delimited list of MIME types that may be dropped or selected.\n- `bb-file-drop-multiple` *(Default: `true`)* A flag indicating whether multiple files may be dropped at once.\n- `bb-file-drop-allow-dir` *(Default: `true`)* A flag indicating whether a directory can be selected.\n- `bb-file-drop-min-size` *(Optional)* The minimum size in bytes of a valid file.\n- `bb-file-drop-max-size` *(Optional)* The maximum size in bytes of a valid file.\n- `bb-file-drop-change` A function that is called when a file or files are selected when the user drops files onto the\ndrop zone or selects them by clicking the element.  This function accepts 2 parameters:\n - `files` An array of valid files that were dropped or selected.  Each item is a JavaScript [File](https://developer.mozilla.org/en-US/docs/Web/API/File)\n object.\n - `rejectedFiles` An array of files that did not meet the specified file type and/or size requirements.\n- `bb-file-drop-link` *(Optional)* The attribute with no value can be specified)* Indicates that an option to add hyperlinks\nshould be displayed.\n- `bb-file-drop-link-change` *(Optional)* A function that is called when the user adds a hyperlink.  The function accepts one\n`link` parameter.  The `link` will have a `url` property containing the link the user added.\n- `bb-file-drop-noclick` Specify this attribute when you want to disable the ability to select a file from a file dialog by clicking the element.\n\nThe `bb-file-item` directive displays summary information about a file that has been added to a form.  By default\nit displays the file's name and a delete button, and if the file from the user's local drive rather than a hyperlink,\na the file's size and thumbnail will also be displayed.  Any content inside this directive will be displayed to the right\nof the preview image.\n\n### File Item Settings ###\n\n- `bb-file-item` The file or hyperlink to display.  If the item is a file, the file size and a preview will be displayed.\n- `bb-file-item-delete` A function to call when an item's delete button is clicked.  The deleted item will be passed\nto the function.",
    "order": 0,
    "example-html": "<div ng-controller=\"FileAttachmentDemoController as fileAttachmentDemo\">\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <div \n                 bb-file-drop\n                 bb-file-drop-change=\"fileAttachmentDemo.fileDropped(files, rejectedFiles)\"\n                 bb-file-drop-multiple=\"true\"\n                 bb-file-drop-max-size=\"5000000\"\n                 bb-file-drop-link\n                 bb-file-drop-link-change=\"fileAttachmentDemo.fileLinked(link)\"\n                 >\n            </div>\n            <div class=\"alert alert-danger alert-dismissable\" ng-show=\"fileAttachmentDemo.rejected.length > 0\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" ng-click=\"fileAttachmentDemo.rejected.length = 0\"><span aria-hidden=\"true\">&times;</span></button>\n                The file <strong>{{fileAttachmentDemo.rejected[fileAttachmentDemo.rejected.length - 1].name}}</strong> is invalid.  Files must be an image and less than 500 KB.\n            </div>\n            <div ng-repeat=\"item in fileAttachmentDemo.allItems\" bb-file-item=\"item\" bb-file-item-delete=\"fileAttachmentDemo.deleteAttachment(item)\" style=\"margin-bottom: 10px\">\n                <div class=\"form-group\">\n                    <label>Name for this attachment</label>\n                    <input type=\"text\" class=\"form-control\" />\n                </div>\n                <div class=\"form-group\">\n                    <label>Tags for this attachment</label>\n                    <input type=\"text\" class=\"form-control\" />\n                </div>\n            </div>\n        </div>\n    </div>\n</div>",
    "example-js": "angular.module('stache')\n    .controller('FileAttachmentDemoController', function () {\n        var self = this;\n    \n        function removeFromArray(items, obj) {\n            var i,\n                n;\n            \n            if (items) {\n                for (i = 0, n = items.length; i < n; i++) {\n                    if (items[i] === obj) {\n                        items.splice(i, 1);\n                        break;\n                    }\n                }\n            }\n        }\n    \n        self.attachments = [];\n        self.links = [];\n        self.rejected = [];\n        self.allItems = [];\n    \n        self.fileDropped = function (files, rejectedFiles) {\n            self.attachments = self.attachments.concat(files);\n            self.allItems = self.allItems.concat(files);\n            self.rejected = rejectedFiles;\n        };\n        \n        self.fileLinked = function (link) {\n            self.links.push(link);\n            self.allItems.push(link);\n        };\n        \n        self.deleteAttachment = function (file) {\n            removeFromArray(self.links, file);\n            removeFromArray(self.attachments, file);\n            removeFromArray(self.allItems, file);\n        };\n    });\n",
    "key": "fileattachments",
    "icon": "cloud-upload"
  },
  {
    "id": "module:Format",
    "longname": "module:Format",
    "summary": "The formatting service provides methods for formatting text and escaping html.",
    "name": "Format",
    "kind": "module",
    "description": "The format service gives you the following functions:\n\n  - `formatText(formatString, args)` Formats the args with a given format string\n  - `escape(text)` Replaces the `<`, `>`, and `&` tags with `&lt;`, `&gt;`, and `&amp;`",
    "order": 0,
    "example-html": "<div ng-controller=\"FormatServiceController\">\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <div class=\"input-group\">\n                <label for=\"formattedText\">Enter Some Text</label>\n                <input class=\"form-control\" type=\"text\" name=\"formattedText\" ng-model=\"locals.formattedText\" />\n            </div>\n            <div>Formatted result is: {{locals.formattedResult}}</div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <div class=\"input-group\">\n                <label for=\"htmlText\">Enter Some Html</label>\n                <input class=\"form-control\" type=\"text\" name=\"htmlText\" ng-model=\"locals.htmlText\" />\n            </div>\n            <div>Html stripped result is: {{locals.htmlResult}}</div>\n        </div>\n    </div>\n</div>",
    "example-js": "/*global angular */\n\n(function () {\n    'use strict';\n    \n    angular.module('stache')\n    .controller('FormatServiceController', ['$scope', 'bbFormat', function ($scope, bbFormat) {\n        $scope.locals = {\n            formattedResult: '',\n            formattedText: '',\n            htmlText: '',\n            htmlResult: ''\n        };\n        \n        $scope.$watch('locals.formattedText', function () {\n            $scope.locals.formattedResult = bbFormat.formatText('[{0}]', $scope.locals.formattedText);\n        });\n        \n        $scope.$watch('locals.htmlText', function () {\n            $scope.locals.htmlResult = bbFormat.escape($scope.locals.htmlText);\n        });\n    }]);\n}());",
    "key": "format",
    "icon": "paragraph"
  },
  {
    "id": "module:Grids",
    "longname": "module:Grids",
    "summary": "The Grid directive allows you to build a full-featured grid with a search box, column picker and filter form.",
    "name": "Grids",
    "kind": "module",
    "description": "### Additional dependencies ###\n\n- **[jqGrid](http://www.trirand.com/blog/) (4.6.0 or higher)**\n- **[icheck.js](http://fronteed.com/iCheck/) (1.0.2 or higher)**\n- **[enquire.js](http://wicky.nillia.ms/enquire.js/) (2.1.2 or later)**\n---\n\nThe Grid directive allows you to build a full-featured grid with a search box, column picker and filter form.\n\n### Grid Settings ###\n- `bb-grid-filters` A directive you can use inside the bb-grid directive to create a filter flyout menu.\n  - `bb-options` An options object for bb-grid-filters that contains the following:\n      - `applyFilters` A function that is called when you click the apply filters button. You can pass updated filters to `bb-grid` by setting `args.filters`.\n      - `clearFilters` A function that is called when you click the clear filters button. You can pass updated filters to `bb-grid` by setting `args.filters`.\n  - `bb-grid-filters-group` A directive you can use inside of `bb-grid-filters` that creates labels (with the `bb-grid-filters-group-label` option) and collapsible areas.\n- `bb-grid-filters-summary` A directive you can use inside the bb-grid directive to create a summary toolbar for your applied filters.\n  - `bb-options` An options object for `bb-grid-filters-summary` that contains the following:\n      - `clearFilters` A function that is called when you click the clear filters (x) icon. You can pass updated filters to `bb-grid` by setting `args.filters`.\n\n- `bb-grid-options` An object with the following properties:\n  - `columns` An array of available columns.  Each column can have these properties:\n        - `allow_see_more` Allows the column to have a see more link to view overflow content.\n        - `caption` The text to display in the column header and column chooser.\n        - `category` A category for the column, can be used to filter in the column chooser.\n        - `center_align` True if the column header and contents should be center aligned.\n        - `controller` The controller function if the column is templated. This allows a cell to perform logic while displaying formatted or complex data. You can access row data from the grid in the column template controller using `$scope.rowData`.\n        - `description` A description for the column, seen in the column chooser.\n        - `exclude_from_search` If true, then the column does not highlight text on search.\n        - `id` A unique identifier for the column.  The ID is referenced by the option object's `selectedColumnIds` property.\n        - `jsonmap` The name of the property that maps to the column's data.\n        - `name` The name of the column.\n        - `right_align` True if the column header and contents should be right aligned.\n        - `template_url` The url for the column template to show formatted or complex data in a cell. The properties of the cell data object can be accessed using the format `data.property_name`.\n        - `width_all` The default width (in pixels) for a column if no breakpoint specific column is specified (`width_xs`, `width_sm`, `width_md`, `width_lg`). If no value is specified, columns will default to 150px, and if the columns do not take up the available room in the grid, the last column will be extended.\n        - `width_xs` The width of the column for screen sizes less than 768px.\n        - `width_sm` The width of the column for screen sizes from 768px to 991px.\n        - `width_md` The width of the column for screen sizes from 992px to 1199px.\n        - `width_lg` The width of the column for screen sizes greater than 1199px.\n  - `data` An array of objects representing the rows in the grid.  Each row should have properties that correspond to the `columns` `jsonmap` properties.\n  - `fixedToolbar` Prevents the toolbar and grid headers from scrolling with the window. Defaults to false.\n  - `filtersAreActive` If true, the filter button highlights to indicate that filters are active.\n  - `getContextMenuItems` If a function is specified, then the grid rows will attempt to create a bootstrap dropdown based on the return value of the function. The return value should be an array of objects that represent the items in a dropdown. The objects should contain the following properties:\n      - `id` A unique string identifier for the option.\n      - `title` The title shown for the dropdown option.\n      - `cmd` A function that will be called when the dropdown option is clicked. It should return false if you wish to close the dropdown after the function is called.\n  - `hasInlineFilters` If true, toggles hide/show on the transcluded content in the `bb-grid` directive when the filter button is pressed.\n  - `hideColPicker` If true, hides the grid column picker in the toolbar.\n  - `hideFilters` If true, hides the filters button in the toolbar.\n  - `multiselect` If true, adds a multiselect checkbox column to the listbuilder.\n  - `onAddClick` If a function is specified, then an add button will appear in the grid toolbar that will call the `onAddClick` function when clicked.\n  - `onAddClickLabel` Label for the add button.\n  - `searchText` The text entered in the grid search box, set by bbGrid.\n  - `selectedColumnIds` An array of unique identifiers indicating the visible columns in the order in which they should be displayed.\n  - `sortOptions` Options around column sorting:\n      - `excludedColumns` An array of column names that should be excluded.\n      - `column` The name of the column that the data should be sorted by, set by bbGrid.\n      - `descending` Set to true by bbGrid if the sort should be in descending order.\n- `bb-grid-pagination` An object set when you intend to use pagination instead of infinite scrolling with your grid. It has the following properties:\n  - `itemsPerPage` The number of rows you wish to show in the grid per page, defaults to 5.\n  - `maxPages` The maximum number of pages to show in the pagination bar, defualts to 5.\n  - `recordCount` The total number of records available through pagination.\n- `bb-multiselect-actions` An array of actions that can be shown in the multiselect action bar. Each action can have the following:\n  - `actionCallback` A function that will be called when the action is clicked.\n  - `automationId` An identifier that will be placed in the `data-bbauto` attribute for automation purposes.\n  - `isPrimary` If true, this action will have the primary button color.\n  - `selections` The selected row objects from the list builder that are associated with this action, this can be updated through the `bb-selections-updated` function.\n  - `title` The text that will appear on the button for the action.\n- `bb-selected-rows` An object that has two way binding to the multiselected rows. It can be used to set the multiselected rows from the parent controller of the directive.\n- `bb-selections-updated` A function which will be called when multiselect selections are updated. The selections are passed to the function as an argument and you can update your multiselect actions accordingly.\n\n### Grid Events ###\n\n  - `includedColumnsChanged` Fires when the user has changed the grid columns.  If you plan to handle reloading the grid after this change (e.g. you need\nto reload data from the server as a result of the column change), set the event handler's `data` parameter's `willResetData` property to `true` to avoid\nreloading the grid with the current data after the event has fired.\n  - `loadMoreRows` Fires when a page changes (when using pagination) or when the 'See more' button is clicked. When raised from a page change, a data object with top and skip parameters is included so that the calling controller can retrieve the proper paged data.",
    "order": 0,
    "example-html": "<div ng-controller=\"GridTestController\">\n    <button class=\"btn btn-primary\" style=\"margin-bottom: 10px;\" ng-click=\"locals.setSelections()\">Set Drum Selection</button>\n    <bb-grid bb-grid-options=\"locals.gridOptions\" bb-multiselect-actions=\"locals.gridActions\" bb-selections-updated=\"locals.updateActions(selections)\" bb-selected-rows=\"locals.selectedRows\">\n            <bb-grid-filters-summary ng-show=\"locals.appliedFilters.instruments.length > 0\" bb-options=\"locals.filterOptions\">\n            <span ng-repeat=\"item in locals.appliedFilters.instruments\">{{item.name}}<span ng-if=\"!$last\">, </span></span>\n        </bb-grid-filters-summary>\n        <bb-grid-filters bb-options=\"locals.filterOptions\">\n            <bb-grid-filters-group bb-grid-filters-group-label=\"'Filter group'\">\n                <div>\n                    <label><input type=\"checkbox\" ng-model=\"locals.guitarFilter\"/> Show guitars</label> \n                </div>\n                <div>\n                    <label><input type=\"checkbox\" ng-model=\"locals.drumsFilter\"/> Show drums</label> \n                </div> \n            </bb-grid-filters-group>\n        </bb-grid-filters>\n    </bb-grid>\n    <div style=\"margin-top: 10px; margin-bottom: 10px;\">\n        <button ng-click=\"locals.gridOptions.loading = true;\">Begin loading</button>\n        <button ng-click=\"locals.gridOptions.loading = false;\">End loading</button>\n    </div>\n    \n    <div class=\"clearfix\"></div>\n    \n    <bb-tile bb-tile-header=\"'Grid with pagination in tile'\">\n        <bb-grid bb-grid-options=\"locals.gridOptions2\" bb-grid-pagination=\"locals.paginationOptions\">\n            <div class=\"bb-filters-inline\">\n                <select ng-model=\"locals.gridOptions2.filters.selectFilter\">\n                    <option value=\"\">All Values</option>\n                    <option value=\"option1\">Option 1</option>\n                    <option value=\"option2\">Option 2</option>\n                </select>\n                <label><input type=\"checkbox\" ng-model=\"locals.gridOptions2.filters.checkFilter\"/>Check 1 Really long Labelll</label>\n            </div>\n        </bb-grid>\n    </bb-tile>\n    \n    <div class=\"clearfix\"></div>\n</div>\n",
    "example-js": "/*global angular, alert*/\n//A comment\nangular.module('stache')\n    .run(['$templateCache', function ($templateCache) {\n        'use strict';\n\n        $templateCache.put('bbGrid/samples/date.html', '<div>{{data | date: \\'medium\\'}}</div>');\n\n        $templateCache.put('bbGrid/samples/gridtooltip.html',\n                          '<div style=\"height: 70px; width: 300px;\"><a>On your face</a></div>');\n        $templateCache.put('bbGrid/samples/mycolumn.html',\n            '<div>' +\n                '<div>Title: {{data.title}}</div>' +\n                '<a href=\"\" tooltip-trigger=\"focus\" tooltip-placement=\"bottom\" bb-tooltip=\"bbGrid/samples/gridtooltip.html\"> Info: {{data.info}}</a>' +\n                '<button class=\"btn btn-success\" ng-click=\"locals.clickIt()\">My Button</button>' +\n            '</div>');\n    }])\n    .controller('TemplateController', ['$scope', function ($scope) {\n        'use strict';\n        $scope.locals = {\n            clickIt: function () {\n                alert('Column button clicked, id: ' + $scope.rowData.id);\n            }\n        };\n    }])\n    .controller('GridTestController', ['$scope', '$filter', function ($scope, $filter) {\n    'use strict';\n    var action1,\n        action2,\n\n        dataSet1 = [\n            {\n                name: 'Patrick',\n                skills: 'Karate, Kung Fu, Italian cooking, Ditch digging'\n            },\n            {\n                name: 'Paul',\n                skills: 'Arguing',\n                cats: '13'\n            },\n            {\n                name: 'George',\n                skills: 'Curiousity',\n                cats: '1'\n            },\n            {\n                name: 'Ringo',\n                skills: 'Slow typing'\n            },\n            {\n                name: 'Samwise',\n                skills: 'Loyalty, Gardening'\n            }\n        ],\n        dataSet2 = [\n            {\n                name: 'Corey',\n                skills: 'Vegetables',\n                cats: 'Threve'\n            },\n            {\n                name: 'Daniel',\n                skills: 'Arguing, spelunking',\n                cats: '1'\n            },\n            {\n                name: 'Rick',\n                skills: 'Leadership, Zombie slaying'\n            },\n            {\n                name: 'Jermey',\n                skills: 'Knowledge, Speling',\n                cats: 'EleventySeven'\n            },\n            {\n                name: 'Frodo',\n                skills: 'Walking, Carrying'\n            }\n        ],\n        dataSet3 = [\n            {\n                name: 'Gollum',\n                skills: 'Precious, Filthy hobbitses, *gollum*'\n            },\n            {\n                name: 'Franklin',\n                skills: 'Turtles',\n                cats: '13'\n            },\n            {\n                name: 'Tater',\n                skills: 'Salad',\n                cats: '6'\n            },\n            {\n                name: 'Bev',\n                skills: 'Growling'\n            },\n            {\n                name: 'Sean',\n                skills: 'Method acting, Drama, Villiany',\n                cats: '9'\n            }\n        ],\n        dataSetBand = [\n            {\n                id: 'blaarrrh',\n                name: 'John',\n                instrument: 'Rhythm guitar',\n                bio: '',\n                templated: {\n                    title: 'Johnny',\n                    info: 'JInfo'\n                },\n                mydate: Date.parse('1/21/2015')\n            },\n            {\n                id: 'PaulId',\n                name: 'Paul',\n                instrument: 'Bass',\n                bio: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus in purus odio. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec consequat ante et felis accumsan volutpat. Nulla leo leo, lacinia nec felis sit amet, tristique feugiat ipsum. Mauris ac velit in mi aliquam auctor vel ac leo. Nullam vehicula congue risus, vitae congue turpis iaculis at. Vestibulum imperdiet tellus erat, sit amet rhoncus neque fringilla vitae.',\n                templated: {\n                    title: 'Paully',\n                    info: 'PInfo'\n                },\n                mydate: Date.parse('2/23/2012')\n            },\n            {\n                id: 'GeorgeId',\n                name: 'George',\n                instrument: 'Lead guitar',\n                bio: '',\n                templated: {\n                    title: 'Georgy',\n                    info: 'GInfo'\n                },\n                mydate: Date.parse('4/14/1999')\n            },\n            {\n                id: 'RingoId',\n                name: 'Ringo',\n                instrument: 'Drums',\n                bio: '',\n                templated: {\n                    title: 'Ringoy',\n                    info: 'RInfo'\n                },\n                mydate: Date.parse('6/22/1989')\n            }\n        ];\n\n    function applyFilters() {\n        $scope.locals.appliedFilters.instruments = [];\n        if ($scope.locals.guitarFilter) {\n            $scope.locals.appliedFilters.instruments.push({name: 'guitars'});\n        }\n        if ($scope.locals.drumsFilter) {\n            $scope.locals.appliedFilters.instruments.push({name: 'drums'});\n        }\n    }\n\n    function updateActions(selections) {\n        var i,\n            selection;\n\n        action1.selections = [];\n        action2.selections = [];\n\n        for (i = 0; i < selections.length; i++) {\n            selection = selections[i];\n            if (selection.instrument.indexOf('guitar') > -1) {\n                action1.selections.push(selection);\n            } else if (selection.instrument.indexOf('Drum') > -1) {\n                action2.selections.push(selection);\n            }\n        }\n    }\n\n    function action1Clicked() {\n        var i,\n            message = 'The selected guitar players are ';\n        if (action1.selections && action1.selections.length > 0) {\n            for (i = 0; i < action1.selections.length; i = i + 1) {\n                message += action1.selections[i].name;\n                if (i !== (action1.selections.length - 1)) {\n                    message += ', ';\n                }\n            }\n            alert(message);\n        }\n    }\n\n    function action2Clicked() {\n        var message = 'Drum Drum Drum!';\n\n        alert(message);\n    }\n\n\n    action1 = {\n        actionCallback: action1Clicked,\n        automationId: 'Action1Button',\n        isPrimary: true,\n        selections: [],\n        title: 'Guitar Action'\n    };\n\n    action2 = {\n        actionCallback: action2Clicked,\n        automationId: 'Action2Button',\n        isPrimary: false,\n        selections: [],\n        title: 'Drum Action'\n    };\n\n    $scope.locals = {\n        appliedFilters: {\n            instruments: []\n        },\n        filterOptions: {\n            applyFilters: function (args) {\n                applyFilters();\n                args.filters = angular.copy($scope.locals.appliedFilters);\n            },\n            clearFilters: function (args) {\n                $scope.locals.guitarFilter = false;\n                $scope.locals.drumsFilter = false;\n                applyFilters();\n                args.filters = angular.copy($scope.locals.appliedFilters);\n            }\n        },\n        gridActions: [\n            action1,\n            action2\n        ],\n        gridOptions: {\n            columns: [\n                {\n                    caption: 'Name',\n                    jsonmap: 'name',\n                    id: 1,\n                    name: 'name',\n                    right_align: true,\n                    category: 'My category',\n                    description: 'Column description',\n                    width_all: 300,\n                    width_xs: 100\n                },\n                {\n                    caption: 'Instrument',\n                    jsonmap: 'instrument',\n                    id: 2,\n                    name: 'instrument',\n                    width_all: 300,\n                    width_xs: 100\n                },\n                {\n                    caption: 'Biography',\n                    jsonmap: 'bio',\n                    id: 3,\n                    name: 'bio',\n                    allow_see_more: true,\n                    center_align: true,\n                    width_all: 400,\n                    width_xs: 100\n                },\n                {\n                    caption: 'Templated',\n                    jsonmap: 'templated',\n                    id: 4,\n                    name: 'templated',\n                    width_all: 300,\n                    template_url: 'bbGrid/samples/mycolumn.html',\n                    controller: 'TemplateController'\n                },\n                {\n                    caption: 'Date',\n                    jsonmap: 'mydate',\n                    id: 5,\n                    name: 'mydate',\n                    width_all: 200,\n                    template_url: 'bbGrid/samples/date.html'\n                }\n            ],\n            data: dataSetBand,\n            getContextMenuItems: function (rowid, rowObject) {\n                if (rowid === 'blaarrrh' || rowObject.name === 'Ringo') {\n                    return [\n                        {\n                            id: 'menu',\n                            title: 'Option1',\n                            cmd: function () {\n                                alert('Context menu option chosen!');\n                                return false;\n                            }\n                        }\n                    ];\n                }\n            },\n            multiselect: true,\n\n            sortOptions: {\n                excludedColumns: ['bio']\n            },\n            selectedColumnIds: [1, 2, 3, 5],\n            columnPickerHelpKey: 'bb-security-users.html',\n            columnPickerMode: 'list'\n        },\n        gridOptions2: {\n            columns: [\n                {\n                    caption: 'Name',\n                    jsonmap: 'name',\n                    id: 1,\n                    name: 'name',\n                    width_xs: 100,\n                    width_all: 300\n                },\n                {\n                    caption: 'Skills',\n                    jsonmap: 'skills',\n                    id: 2,\n                    name: 'skills',\n                    allow_see_more: true,\n                    width_all: 100\n                },\n                {\n                    caption: 'Number of cats',\n                    jsonmap: 'cats',\n                    id: 3,\n                    name: 'cats'\n                }\n            ],\n            data: dataSet1,\n            fixedToolbar: true,\n            onAddClick: function () {\n                alert('Add button clicked!!');\n            },\n            onAddClickLabel: 'Add button',\n            selectedColumnIds: [1, 2, 3],\n            columnPickerHelpKey: 'bb-security-users.html',\n            sortOptions: {\n                descending: true\n            },\n            hasInlineFilters: true,\n            filters: {}\n        },\n        paginationOptions: {\n            recordCount: 30\n        },\n        guitarFilter: false,\n        drumsFilter: false,\n        updateActions: updateActions,\n        setSelections: setSelections,\n        selectedRows: [dataSetBand[1]]\n    };\n          \n    function setSelections() {\n        $scope.locals.selectedRows = [dataSetBand[3]];\n    }\n        \n    function getDataSet(top, skip) {\n        if (skip === 0 || skip === 15) {\n            return dataSet1;\n        } else if (skip === 5 || skip === 20) {\n            return dataSet2;\n        } else {\n            return dataSet3;\n        }\n    }\n\n    $scope.$watch('locals.gridOptions.sortOptions', function () {\n        $scope.locals.gridOptions.data.sort(function (a, b) {\n            var descending = $scope.locals.gridOptions.sortOptions.descending ? 1 : -1,\n                sortProperty = $scope.locals.gridOptions.sortOptions.column;\n            if (a[sortProperty] > b[sortProperty]) {\n                return (descending);\n            } else if (a[sortProperty] < b[sortProperty]) {\n                return (-1 * descending);\n            } else {\n                return 0;\n            }\n        });\n    }, true);\n\n    function search(array, text) {\n        if (angular.isDefined(text) && text !== '') {\n            return array.filter(function (element) {\n                var check = ((element.name.indexOf(text) > -1) ||\n                       (element.instrument.indexOf(text) > -1) ||\n                       (element.bio.indexOf(text) > -1) ||\n                       (element.templated.info.indexOf(text) !== -1) ||\n                       (($filter('date')(element.mydate, 'medium')).indexOf(text) > -1));\n                return check;\n            });\n\n        } else {\n            return array;\n        }\n    }\n        \n    function filter(array, filters) {\n        var i,\n            item,\n            newData = [];\n        if (angular.isDefined(filters) && filters.instruments && filters.instruments.length > 0) {\n            for (i = 0; i < filters.instruments.length; i++) {\n                item = filters.instruments[i];\n                if (item.name === 'guitars') {\n                    newData.push.apply(newData, [dataSetBand[0], dataSetBand[1], dataSetBand[2]]);\n                }\n                if (item.name === 'drums') {\n                    newData.push(dataSetBand[3]);\n                }\n            }\n            return newData;\n        } else {\n            return array;\n        }\n    }\n        \n    function filterAndSearch() {\n        var filteredData = [],\n            searchedData = [];\n        \n        filteredData = filter(dataSetBand, $scope.locals.gridOptions.filters);\n        searchedData = search(filteredData, $scope.locals.gridOptions.searchText);\n        $scope.locals.gridOptions.data = searchedData;\n        \n    }\n        \n    $scope.$watch('locals.gridOptions.searchText', function () {\n        filterAndSearch();\n    });\n\n    $scope.$watch('locals.gridOptions.filters', function () {\n        filterAndSearch();\n    });\n    \n    $scope.$watch('locals.gridOptions2.filters', function (newValue) {\n        \n        $scope.locals.gridOptions2.filtersAreActive = newValue && (newValue.checkFilter || newValue.selectFilter);\n        \n        if (angular.isDefined(newValue)) {\n\n            if (newValue.checkFilter) {\n                $scope.locals.gridOptions2.data = [dataSet1[2]];\n                $scope.locals.paginationOptions.recordCount = 1;\n            } \n            \n            if (newValue.selectFilter) {\n                if (newValue.selectFilter === 'option1') {\n                    if (newValue.checkFilter) {\n                        $scope.locals.gridOptions2.data = [dataSet1[0], dataSet1[2]];\n                    } else {\n                        $scope.locals.gridOptions2.data = [dataSet1[0]];\n                    }\n                   \n                    $scope.locals.paginationOptions.recordCount = $scope.locals.gridOptions2.data.length;\n                    return;\n                } else if (newValue.selectFilter === 'option2') {\n                    \n                    if (newValue.checkFilter) {\n                        $scope.locals.gridOptions2.data = [dataSet1[1], dataSet1[2]];\n                    } else {\n                        $scope.locals.gridOptions2.data = [dataSet1[1]];\n                    }\n                    \n                    $scope.locals.paginationOptions.recordCount = $scope.locals.gridOptions2.data.length;\n                    return;\n                } \n            } else if (newValue.checkFilter) {\n                $scope.locals.gridOptions2.data = [dataSet1[2]];\n                $scope.locals.paginationOptions.recordCount = $scope.locals.gridOptions2.data.length;\n                return;\n            }\n        }\n        $scope.locals.gridOptions2.data = dataSet1;\n        $scope.locals.paginationOptions.recordCount = 30;\n        \n    }, true);\n        \n    $scope.$on('loadMoreRows', function (event, data) {\n        $scope.locals.gridOptions2.data = getDataSet(data.top, data.skip);\n    });\n\n    $scope.$on('includedColumnsChanged', function (event, data) {\n        // Optionally set the data's willResetData property to true if the controller will handle reloading the results\n        // after the user has changed the selected grid columns.\n    });\n}]);\n",
    "key": "grids",
    "icon": "table"
  },
  {
    "id": "module:Help",
    "longname": "module:Help",
    "summary": "The Help service allows other Angular components to open or close the help panel programmatically.",
    "name": "Help",
    "kind": "module",
    "description": "### Additional Dependencies ###\n\n - **[easyXDM](http://easyxdm.net/wp/) (2.4.19 or higher)** Used to make cross-domain requests to the help server\n\n---\n\nThe Help service allows other Angular components to open or close the help panel programmatically.  When the widget is opened, it will interrogate the page to identify the current help topic and display the relevant help content.  Settings for this service are controlled with the `bbHelpConfig` object.\n\n### bbHelpConfig Settings ###\n\n - `productId` The current product identifier used to build the URL to the product's help content.\n - `url` The URL to the Help Widget that will be included.\n - `customLocales` Optional.  An array of additional locales for which the product has help content other than the default help content locale.  This array should contain strings like 'en-gb' or 'fr'.",
    "order": 0,
    "example-html": "<div ng-controller=\"HelpTestController\">\n    <button class=\"btn btn-default\" ng-click=\"open()\">Open</button>\n    <button class=\"btn btn-default\" ng-click=\"close()\">Close</button>\n</div>",
    "example-js": "angular.module('stache').controller('HelpTestController', ['$scope', 'bbHelp', function ($scope, bbHelp) {\n\n    $scope.open = function () {\n        bbHelp.open('bb-gifts.html');\n    };\n\n    $scope.close = function () {\n        bbHelp.close();\n    };\n}]);\n",
    "key": "help",
    "icon": "question"
  },
  {
    "id": "module:Helpbutton",
    "longname": "module:Helpbutton",
    "summary": "The Helpbutton directive creates a help icon which can be clicked to launch a specific help key that is different than the default page help context.",
    "name": "Helpbutton",
    "kind": "module",
    "description": "The Helpbutton directive creates a help icon which can be clicked to launch a specific help key that is different than the default page help context.  Optionally, it can override the page help context throughout the duration that the helpbutton exists on the page.\n\n### Help Button Settings ###\n\n - `bb-help-key` Specifies the help key that will be opened when the help button is clicked.\n - `bb-set-help-key-override` *(Default: `false`)* If `true`, then this button will override the current page help context, so clicking on the help ear will open to this help key while this button exists.",
    "order": 0,
    "example-html": "<div style=\"float: left; margin-right: 5px\">What does this do</div>\n<div bb-help-button bb-help-key=\"bb-security-users.html\"></div>",
    "example-js": "// No script is required.",
    "key": "helpbutton",
    "icon": "question-circle"
  },
  {
    "id": "module:Helpwidget",
    "longname": "module:Helpwidget",
    "summary": "This directive is no longer being maintained. For showing the help panel from a controller, see the Help service.",
    "name": "Helpwidget",
    "kind": "module",
    "description": "### *Deprecated* ###\n\nThis directive is no longer being maintained.  For showing the help panel from a controller, see the [Help](../help) service.\n\n<s>\n### Additional Dependencies ###\n\n - **[easyXDM](http://easyxdm.net/wp/) (2.4.19 or higher)** Used to make cross-domain requests to the help server\n\n---\n\nThe Helpwidget directive includes the help widget on the page.  When the widget is opened, it will interrogate the page to identify the current help topic and display the relevant help content.  Settings for this directive are controlled with the `bbHelpwidgetConfig` object.\n\n### bbHelpwidgetConfig Settings ###\n\n - `productId` The current product identifier used to build the URL to the product's help content.\n - `url` The URL to the Help Widget that will be included.\n - `customLocales` Optional.  An array of additional locales for which the product has help content other than the default help content locale.  This array should contain strings like 'en-gb' or 'fr'.\n </s>",
    "deprecated": true,
    "order": 0,
    "example-html": "<div ng-controller=\"HelpWidgetTestController\">\n    <section bb-helpwidget></section>\n\n    <button ng-click=\"open()\">Open</button>\n    <button ng-click=\"close()\">Close</button>\n</div>",
    "example-js": "angular.module('stache').controller('HelpWidgetTestController', ['$scope', function ($scope) {\n\n    $scope.open = function () {\n        window.BBHELP.HelpWidget.open('bb-gifts.html');\n    };\n\n    $scope.close = function () {\n        window.BBHELP.HelpWidget.close();\n    };\n}]);\n",
    "key": "helpwidget",
    "icon": "archive"
  },
  {
    "id": "module:Highlight",
    "longname": "module:Highlight",
    "summary": "The Highlight directive allows you to highlight portions of text inside DOM elements.",
    "name": "Highlight",
    "kind": "module",
    "description": "The Highlight directive allows you to highlight portions of text inside DOM elements.  Set the `bb-highlight` attribute to the text you want to highlight and all matching text within the element will be highlighted.\n\nOptionally use the `bb-highlight-beacon` attribute to reprocess the matching text content when content is changed.",
    "order": 0,
    "example-html": "<div ng-controller=\"HighlightTestController\">\n  <div class=\"tile-form\">\n    <div class=\"input-group\">\n      <label for=\"highlight-text-input-{{$id}}\" class=\"control-label\">\n        Enter some text to highlight:\n      </label>\n      <br />\n      <input id=\"highlight-text-input-{{$id}}\" class=\"form-control\" ng-model=\"locals.highlightText\" />\n    </div>\n    <div class=\"clearfix\"></div>\n    <div class=\"input-group\">\n      <label for=\"highlight-additional-content-{{$id}}\" class=\"control-label\">\n        <input type=\"checkbox\" id=\"highlight-additional-content-{{$id}}\" ng-model=\"locals.showAdditionalContent\" /> Show additional content\n      </label>\n    </div>\n    <div class=\"clearfix\"></div>\n    <div bb-highlight=\"locals.highlightText\" bb-highlight-beacon=\"locals.showAdditionalContent\">\n      What you type will be highlighted here.\n      <div ng-if=\"locals.showAdditionalContent\">\n        This will be highlighted too!\n      </div>\n    </div>\n  </div>\n</div>",
    "example-js": "angular.module('stache').controller('HighlightTestController', ['$scope', function ($scope) {\n    $scope.locals = {\n        highlightText: ''\n    };\n}]);\n",
    "key": "highlight",
    "icon": "paint-brush"
  },
  {
    "id": "module:Mediabreakpoints",
    "longname": "module:Mediabreakpoints",
    "summary": "The Media Breakpoints service can call one or more callback functions whenever a Bootstrap grid system breakpoint is hit.",
    "name": "Mediabreakpoints",
    "kind": "module",
    "description": "### Additional Dependencies ##\n\n - **[enquire.js](http://wicky.nillia.ms/enquire.js/) (2.1.2 or later)**\n\n---\n\nThe Media Breakpoints service can call one or more callback functions whenever a [Bootstrap grid system breakpoint](http://getbootstrap.com/css/#grid-media-queries) is hit.  This allows for\nmanipulating the UI programmatically in cases where CSS media queries are not sufficient.\n\n### Media Breakpoint Methods ###\n\n - `register(callback)` Registers a callback method with the service that will be called any time a media breakpoint is hit.  The callback function will be called with the following arguments:\n  - `breakpoint` An object with `xs`, `sm`, `md` and `lg` properties.  The property corresponding with the current breakpoint will be set to `true` and the rest set to `false`.\n - `unregister(callback)` Unregisters the specified callback method.  This should be called whenever the controller's `$scope` is destroyed.\n - `getCurrent()` Gets the current media breakpoint object.",
    "order": 0,
    "example-html": "<div ng-controller=\"MediaBreakpointsTestController\">\n  Resize the browser and watch the label below.  The label's text will change whenever a media breakpoint is hit.\n  <div class=\"alert alert-info\" style=\"margin-top: 10px;\">\n    The current media breakpoint is <strong>{{locals.status}}</strong>\n  </div>\n</div>",
    "example-js": "angular.module('stache').controller('MediaBreakpointsTestController', ['$scope', 'bbMediaBreakpoints', function ($scope, bbMediaBreakpoints) {\n    function mediaBreakpointCallback(breakpoint) {\n        var p;\n\n        for (p in breakpoint) {\n            if (breakpoint.hasOwnProperty(p) && breakpoint[p]) {\n                $scope.locals.status = p;\n                break;\n            }\n        }\n    }\n\n    $scope.locals = {};\n\n    bbMediaBreakpoints.register(mediaBreakpointCallback);\n\n    $scope.$on('$destroy', function () {\n        bbMediaBreakpoints.unregister(mediaBreakpointCallback);\n    });\n\n}]);\n",
    "key": "mediabreakpoints",
    "icon": "mobile"
  },
  {
    "id": "module:Modal",
    "longname": "module:Modal",
    "summary": "The Modal directive and service can be used to launch modals in a consistent way in a Sky application.",
    "name": "Modal",
    "kind": "module",
    "description": "The Modal directive and service can be used to launch modals in a consistent way in a Sky application.  Rather than using the ui-bootstrap `$modal.open`, use `bbModal.open` instead.  This will take the same options object but allows for some custom default behaviors in Sky.\n\nIn addition to the `bbModal` service for lauching modals, a `bb-modal` directive should be used to have common look-and-feel for modal content.  Within `bb-modal`, use `bb-modal-header` to include a common modal header, `bb-modal-footer` to include a common modal footer and buttons, and `bb-modal-body` to wrap the modal's body content.\n\n### Modal Header Settings ###\n\n - `bb-modal-help-key` Specifies the help key for the modal.  This will be be linked from a help button included in the modal header.\n\n### Modal Footer Buttons ##\n\n - `bb-modal-footer-button` Generic button for the modal footer.  HTML included in this tag will be included in the contents of the button.  You must register events for the button manually.\n\n - `bb-modal-footer-primary-button` Primary button for the modal footer which will have a custom look.  Default content is 'Save', but HTML included in this tag will be included as the contents of the button if provided.  You must register events for the button manually.\n\n - `bb-modal-footer-cancel-button` Cancel button for the modal footer.  Default content is 'Cancel', but HTML included in this tag will be included as the contents of the button if provided.  This button will automatically cancel the modal form.",
    "order": 0,
    "example-html": "<div ng-controller=\"ModalTestController\">\n    <button type=\"button\" ng-click=\"open()\">Open</button>\n</div>\n\n<script type=\"text/ng-template\" id=\"demo/modal/modalform.html\">\n    <bb-modal>\n        <div class=\"modal-form\">\n            <bb-modal-header bb-modal-help-key=\"'bb-security-users.html'\">My Header</bb-modal-header>\n            <div bb-modal-body>\n                <form>\n                    <div class=\"form-group\">\n                        <label class=\"control-label\">Sample text box</label>\n                        <input type=\"text\" class=\"form-control\" />\n                        <label class=\"control-label\">Search</label>\n                        <ui-select ng-model=\"data.color_id\" append-to-body=\"true\">\n                            <ui-select-match allow-clear placeholder=\"{{resources.watermark_single}}\" >{{$select.selected.name}}</ui-select-match>\n                            <ui-select-choices repeat=\"color.id as color in locals.colors | filter: $select.search\">\n                                <span>{{color.name}}</span>\n                            <ui-select-choices/>\n                        </ui-select>\n                    </div>\n                </form>\n            </div>\n            <bb-modal-footer>\n                <bb-modal-footer-button-primary></bb-modal-footer-button-primary>\n                <bb-modal-footer-button>Sample button</bb-modal-footer-button>\n                <bb-modal-footer-button-cancel></bb-modal-footer-button-cancel>\n            </bb-modal-footer>\n        </div>\n    </bb-modal>\n</script>",
    "example-js": "/* global angular*/\nangular.module('stache')\n    .controller('ModalContentController', ['$scope', function ($scope) {\n        'use strict';\n        $scope.data = {\n            color_id: '2'\n        };\n\n        $scope.resources = {\n            watermark_single: 'Search for a color'\n        };\n\n        $scope.locals = {\n            colors: [\n                { id: '1', name: 'Aqua' },\n                { id: '2', name: 'Blue' },\n                { id: '3', name: 'Brown' },\n                { id: '4', name: 'Gold' },\n                { id: '5', name: 'Gray' },\n                { id: '6', name: 'Green' },\n                { id: '7', name: 'Navy' },\n                { id: '8', name: 'Pink' },\n                { id: '9', name: 'Purple' },\n                { id: '10', name: 'Silver' },\n                { id: '11', name: 'White' },\n                { id: '12', name: 'Yellow' }\n            ]\n        };\n\n    }])\n    .controller('ModalTestController', ['bbModal', '$scope', function (bbModal, $scope) {\n        'use strict';\n        $scope.open = function () {\n            bbModal.open({\n                controller: 'ModalContentController',\n                templateUrl: 'demo/modal/modalform.html'\n            });\n        };\n    }]);\n",
    "key": "modal",
    "icon": "list-alt"
  },
  {
    "id": "module:Money",
    "longname": "module:Money",
    "summary": "This directive is no longer being maintained. For formatting currency in a textbox, see the Autonumeric directive.",
    "name": "Money",
    "kind": "module",
    "description": "### *Deprecated* ###\n\nThis directive is no longer being maintained.  For formatting currency in a textbox, see the [Autonumeric](../autonumeric) directive.\n\n<s>\n### Additional Dependencies ###\n\n - **[autoNumeric](http://www.decorplanit.com/plugin/) (1.9.27 or higher)** Used to format money values\n\nThe Money Input directive formats currency values as the user types in the input field.  The formatting options can be set globally using the `bbMoneyConfig` service.\n\n### Config Options ###\n\n - `currencyPositivePattern` *(Default: `$n`)* The pattern used to format positive currency values.\n - `currencyDecimalDigits` *(Default: `2`)* The number of digits to display after the decimal separator.\n - `currencyDecimalSeparator` *(Default: `.`)* The character to display before the decimal digits.\n - `currencyGroupSize` *(Default: `3`)* The number of digits each group should contain before displaying the group separator character.\n - `currencyGroupSeparator` *(Default: `,`)* The character to display between groups.\n - `currencySymbol` *(Default: `&#36;`)* The symbol that represents the value's currency type.\n </s>",
    "deprecated": true,
    "order": 0,
    "example-html": "<div ng-controller=\"MoneyInputTestController\">\n  <div class=\"tile-form\">\n    <div class=\"input-group\">\n      <label for=\"money-input-{{$id}}\" class=\"control-label\">\n        Enter a numeric value.\n      </label>\n      <br />\n      <input type=\"text\" class=\"form-control\" id=\"money-input-{{$id}}\" ng-model=\"locals.moneyFormattedValue\" bb-money-input=\"locals.moneyValue\" style=\"text-align: right\" />\n      <a href=\"#\"></a>\n    </div>\n    <div class=\"clearfix\"></div>\n    <div>\n      Raw value: <strong>{{locals.moneyValue}}</strong>\n      <br />\n      Formatted value: <strong>{{locals.moneyFormattedValue}}</strong>\n    </div>\n  </div>\n</div>",
    "example-js": "angular.module('stache')\n    .controller('MoneyInputTestController', ['$scope', function ($scope) {\n        $scope.locals = {\n            moneyFormattedValue: '$123,456.78',\n            moneyValue: 12345678\n        };\n    }]);\n",
    "key": "money",
    "icon": "archive"
  },
  {
    "id": "module:Navbar",
    "longname": "module:Navbar",
    "summary": "The navbar directive creates a Bootstrap nav element with the appropriate Sky classes applied to it and its children.",
    "name": "Navbar",
    "kind": "module",
    "description": "The navbar directive creates a Bootstrap `nav` element with the appropriate Sky classes applied to it and its children, and also adds behavior such as showing sub-navigation items when the user hovers over the dropdown.",
    "order": 0,
    "example-html": "<bb-navbar>\n  <div class=\"container-fluid\">\n    <ul class=\"nav navbar-nav navbar-left\">\n      <li class=\"bb-navbar-active\"><a href=\"\">Selected Item</a></li>\n      <li class=\"dropdown\">\n        <a href=\"\" class=\"dropdown-toggle\" role=\"button\">Child Items <span class=\"caret\"></span></a>\n        <ul class=\"dropdown-menu\" role=\"menu\">\n\n          <li>\n            <a href=\"\">Child Item 1</a>\n          </li>\n\n          <li>\n            <a href=\"\">Child Item 2</a>\n          </li>\n\n          <li>\n            <a href=\"\">Child Item 3</a>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <ul class=\"nav navbar-nav navbar-right\">\n      <li><a href=\"\">Right Item</a></li>\n    </ul>\n  </div>\n</bb-navbar>",
    "example-js": "angular.module('stache')\n    .controller('NavbarTestController', angular.noop);\n",
    "key": "navbar",
    "icon": "compass"
  },
  {
    "id": "module:Page",
    "longname": "module:Page",
    "summary": "The Page directive provides functionality around loading pages.",
    "name": "Page",
    "kind": "module",
    "description": "The Page directive provides functionality around loading pages.\n\n### Page Settings ###\n\n - `bb-page-status` The status of the page.\n    - `LOADING` Denotes the page is currently loading.\n    - `LOADED` Denotes the page has successfully finished loading.\n    - `NOT_AUTHORIZED` Denotes the page has finished loading and should show the unauthorized content.\n    - `NOT_FOUND` Denotes the page is has finished loading and should redirect to the not found page.\n - `bb-page-uses-load-manager` Allow the page to use the bb-data load manager.",
    "order": 0,
    "example-html": "<div ng-controller=\"PageTestController\">\n    <bb-page bb-page-status=\"locals.pageStatus\" bb-page-uses-load-manager=\"true\">\n        <div>\n            Page Content\n        </div>\n    </bb-page>\n    <button ng-click=\"locals.simulateLoading()\">Simulate loading</button>\n    <button ng-click=\"locals.simulateNotAuthorized()\">Simulate not authorized</button>\n</div>",
    "example-js": "/*global angular */\n\nangular.module('stache')\n    .controller('PageTestController', ['$scope', '$timeout', 'bbPage', function ($scope, $timeout, bbPage) {\n        'use strict';\n        var locals,\n            testLoading = false;\n\n        function simulateLoading() {\n            testLoading = true;\n            locals.pageStatus = bbPage.pageStatuses.LOADING;\n            $scope.$emit('bbBeginWait');\n\n            $timeout(function () {\n                testLoading = false;\n                locals.pageStatus = bbPage.pageStatuses.LOADED;\n                $scope.$emit('bbEndWait');\n            }, 1500);\n        }\n\n        function simulateNotAuthorized() {\n            locals.pageStatus = bbPage.pageStatuses.NOT_AUTHORIZED;\n        }\n\n        locals = $scope.locals = {};\n\n        $scope.$on('bbBeginWait', function (event) {\n            if (!testLoading) {\n                event.stopPropagation();\n            }\n        });\n\n        locals.pageStatus = bbPage.pageStatuses.LOADED;\n        locals.simulateLoading = simulateLoading;\n        locals.simulateNotAuthorized = simulateNotAuthorized;\n    }]);\n",
    "key": "page",
    "icon": "file-o"
  },
  {
    "id": "module:Pagination",
    "longname": "module:Pagination",
    "summary": "The Pagination directive allows list data to be displayed across multiple pages. When the number of items in the list exceeds the page size, a pagination control is displayed.",
    "name": "Pagination",
    "kind": "module",
    "description": "The Pagination directive allows list data to be displayed across multiple pages.  When the number of items in the list exceeds the page size, a pagination control is displayed.\n\nThe `bb-pagination-content` directive and the `bbPaging` service are used in conjunction with this directive.  The `bb-pagination-content` is used to wrap the paged content so that the height of the wrapper can be kept as a constant height across pages regardless of contents.  When the list data is bound, the height of the largest page will be used for the wrapper so that the height of the list will not fluctuate as the user pages through it.\nThe `bbPaging` service is used to create the paged data and responds to changes in the pagination directive.\n\n### Pagination Settings ###\n\n - `bb-pagination` The paged data initialized by the `bbPaging` service.\n - `bb-pagination-disabled` Determines whether the use can interact with the pagination control.\n\n### Pagination Content Settings ##\n\n - `bb-pagination-content` The paged data initialized by the `bbPaging` service.\n\n### Paging Settings ##\nThese are optional properties of the object passed to `bbPaging.init()`\n\n - `currentPage` *(Default: `1`)* The initial page to display\n - `itemsPerPage` *(Default: `5`)* The number of items to display per page",
    "order": 0,
    "example-html": "<div ng-controller=\"PaginationTestController\">\n  <div bb-pagination-content=\"locals.itemsPaged\">\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th>Paged data</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr ng-repeat=\"item in locals.itemsPaged.items\">\n          <td>{{item.text}}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div bb-pagination=\"locals.itemsPaged\"></div>\n</div>",
    "example-js": "angular.module('stache')\n    .controller('PaginationTestController', ['$scope', 'bbPaging', function ($scope, bbPaging) {\n        var items = [\n            {text: 'Item 1'},\n            {text: 'Item 2'},\n            {text: 'Item 3'},\n            {text: 'Item 4'},\n            {text: 'Item 5'},\n            {text: 'Item 6'},\n            {text: 'Item 7'},\n            {text: 'Item 8'},\n            {text: 'Item 9'},\n            {text: 'Item 10'},\n            {text: 'Item 11'},\n            {text: 'Item 12'}\n        ];\n\n        $scope.locals = {\n            itemsPaged: bbPaging.init(items)\n        };\n    }]);\n",
    "key": "pagination",
    "icon": "files-o"
  },
  {
    "id": "module:Popover",
    "longname": "module:Popover",
    "summary": "The bb-popover-template directive enables an HTML-formatted popover to be displayed via a trigger element.",
    "name": "Popover",
    "kind": "module",
    "description": "The `bb-popover-template` directive enables an HTML-formatted popover to be displayed via a trigger element. This directive is an alternative to the `popover` directive from Angular UI Bootstrap, making it easier\nto define markup in a template rather than directly in the view's controller.\n\nThe `bb-popover-template` attribute should specify a URL for a template in the `$templateCache` that will be used as the popover content. The scope applied to this template inherits the current scope.  A `hide` function is also\nprovided on the scope to dismiss the popover.\n\nThe directive is built as a thin wrapper of the [Angular UI Bootstrap Popver](http://angular-ui.github.io/bootstrap/) directive and supports all of it's optional properties.",
    "order": 0,
    "example-html": "<div ng-controller=\"PopoverTestController\">\n  <div>\n    To see a popover with a title\n    <a bb-popover-template='bbPopoverTemplate/samples/samplepopover.html' data-popover-title=\"More Info\">\n      Click here\n    </a>.\n  </div>\n  <div>\n    To see a popover without a title\n    <a bb-popover-template='bbPopoverTemplate/samples/samplepopover.html'>\n      Click here\n    </a>.\n  </div>\n  <div>\n    Choose the location of the popover:\n    <button popover-placement=\"top\" bb-popover-template='bbPopoverTemplate/samples/samplepopover.html' class=\"btn btn-default\">Top</button>\n    <button popover-placement=\"bottom\" bb-popover-template='bbPopoverTemplate/samples/samplepopover.html' class=\"btn btn-default\">Bottom</button>\n    <button popover-placement=\"left\" bb-popover-template='bbPopoverTemplate/samples/samplepopover.html' class=\"btn btn-default\">Left</button>\n    <button popover-placement=\"right\" bb-popover-template='bbPopoverTemplate/samples/samplepopover.html' class=\"btn btn-default\">Right</button>\n  </div>\n  <div>\n    Selected beverage: {{selectedItem}}\n  </div>\n</div>",
    "example-js": "angular.module('stache')\n    .run(['$templateCache', function ($templateCache) {\n        // Typically this would either point to a URL or generated using a Grunt task like html2js.  For demo\n        // purposes we'll just manually put the template in the cache.\n        $templateCache.put('bbPopoverTemplate/samples/samplepopover.html',\n            '<div class=\"tooltip-container\">' +\n                '<div>Select a beverage:</div>' +\n                '<div><select ng-model=\"$parent.selectedItem\" ng-options=\"item as item for item in items\"></select></div>' +\n                '<a ng-click=\"hide()\">Close me</a>' +\n            '</div>');\n    }])\n    .controller('PopoverTestController', ['$scope', function ($scope) {\n        $scope.items = ['Coke', 'Sprite', 'Dr Pepper', 'Pibb'];\n        $scope.selectedItem = 'Coke';\n    }]);\n",
    "key": "popover",
    "icon": "newspaper-o"
  },
  {
    "id": "module:Scroll into view",
    "longname": "module:Scroll into view",
    "summary": "The bb-scroll-into-view directive causes an element to scroll into the viewport whenever its bound value changes.",
    "name": "Scroll into view",
    "kind": "module",
    "description": "The `bb-scroll-into-view` directive causes an element to scroll into the viewport whenever its bound value changes.\n\n### Settings ###\n\n - `bb-scroll-into-view` The value that triggers the scroll.\n - `bb-scroll-into-view-highlight` A Boolean indicating whether the element should be highlighted when scrolling completes.",
    "order": 0,
    "example-html": "<div ng-controller=\"ScrollIntoViewTestController\">\n    <h3>Tiles on pages</h3>\n\n    <button type=\"button\" class=\"btn btn-primary\" ng-click=\"locals.scrollIntoView()\">Scroll into view</button>\n\n    <div class=\"row\">&nbsp;</div>\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <div style=\"background-color: #f2f2f2; padding: 15px\">\n                <bb-tile bb-tile-header=\"resources.tile_header\" bb-tile-collapsed=\"locals.is_collapsed\" bb-scroll-into-view=\"scrollIntoViewCount\" bb-scroll-into-view-highlight=\"'true'\">\n                    <div bb-tile-section style=\"height: 400px\">\n                Test.\n                    </div>\n                </bb-tile>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"row\">&nbsp;</div>\n\n    <button type=\"button\" class=\"btn btn-primary\" ng-click=\"locals.scrollIntoView()\">Scroll into view</button>\n\n    <div class=\"row\">&nbsp;</div>\n    \n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <div style=\"background-color: #f2f2f2; padding: 15px; height: 300px; position: relative; overflow-y: auto;\">\n                <bb-tile bb-tile-header=\"resources.tile_header\" bb-tile-collapsed=\"locals.is_collapsed\" bb-scroll-into-view=\"scrollParentIntoViewCount\" bb-scroll-into-view-highlight=\"'true'\" style=\"position: relative; top: 200px\">\n                    <div bb-tile-section>\n                        This element is within another scrollable element, so the scrollable parent should be scrolled instead of the document.\n                    </div>\n                </bb-tile>\n                <div style=\"height: 500px\"></div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row\">&nbsp;</div>\n\n    <button type=\"button\" class=\"btn btn-primary\" ng-click=\"locals.scrollParentIntoView()\">Scroll parent into view</button>\n    \n</div>",
    "example-js": "angular.module('stache').controller('ScrollIntoViewTestController', ['bbModal', '$scope', function (bbModal, $scope) {\n    $scope.resources = {\n        tile_header: 'Tile header'\n    };\n\n    $scope.locals = {\n        is_collapsed: false,\n        scrollIntoView: function () {\n            $scope.scrollIntoViewCount = ($scope.scrollIntoViewCount || 0) + 1;\n        },\n        scrollParentIntoView: function () {\n            $scope.scrollParentIntoViewCount = ($scope.scrollParentIntoViewCount || 0) + 1;\n        }\n    };\n}]);\n",
    "key": "scrollintoview",
    "icon": "eye"
  },
  {
    "id": "module:Searchfield",
    "longname": "module:Searchfield",
    "summary": "The Searchfield directive allows you to easily build single- and multi-search fields that can be filtered as the user types.",
    "name": "Searchfield",
    "kind": "module",
    "description": "### Additional Dependencies ###\n\n - **[ui-select](https://github.com/angular-ui/ui-select) (0.11.0 or higher - .js and .css files needed)**\n\n---\n\nThe Searchfield directive allows you to easily build single- and multi-search fields that can be filtered as the user types.  This directive uses all the syntax and settings of the `ui-select` third party control (see the `ui-select` documentation for more information, options, and settings).\n\nThe search field can be used for a local search (i.e. dropdown box where you have all the data already loaded), or it can be used for a remote search to search larger datasets on a server.  Both types support single- and multi-search capabilities.\n\n### Local Search Settings ###\n\n - `ui-select-choices`\n   - `repeat` Required. An expression that defines the array of choices.  If a `filter` is included, then the choices will be filtered by what the user types, otherwise it will behave just a like a normal dropdown box.  See the `ui-select` documentation for more information.\n\n### Remote Search Settings ###\n\n - `ui-select-choices`\n   - `repeat` Required. An expression that defines the array of choices that will be populated from a remote server.  See the `ui-select` documentation for more information.\n   - `refresh` Required. A function call to load the results from a remote server. The function should at least take `$select.search` as a parameter, and it should guard against calling the remote server with an empty search value.\n     - ***NOTE:** The search control needs to know when you get results back from the server in order to properly display a \"no results\" message when necessary.  In your refresh function, after you receive and store the results, then you MUST fire the `bbSearchFinished` event like this:  `$scope.$broadcast('bbSearchFinished');`.*\n   - `refresh-delay` Optional. The delay in milliseconds after the last keystroke before kicking off the remote search. Default from `ui-select` is 1000 ms.\n\n### Single Search Settings ###\n\n - `ui-select-match` The text of the selection to display in the search field. Note: The value should use the `$select.selected` syntax.\n   - `allow-clear` Optional. Allows you to clear the current value by rendering an \"X\" button.\n   - `placeholder` Optional. Default text when no selection is present.\n\n### Multiple Search Settings ###\n\n - `ui-select`\n   - `multiple` Required. Styles the search to accept multiple search values.\n - `ui-select-match` The text of the selection to display in the search field. Note: The value should use the `$item` syntax.\n   - `placeholder` Optional. Default text when no selection is present.",
    "order": 0,
    "example-html": "<form>\n  <div ng-controller=\"SearchfieldLocalTestController\">\n    <h3>Local Search <small>(i.e. dropdown with search)</small></h3>\n    <div class=\"form-group\">\n      <label class=\"control-label\">Single Search</label>\n      <ui-select ng-model=\"data.color_id\">\n        <ui-select-match allow-clear placeholder=\"{{resources.watermark_single}}\">{{$select.selected.name}}</ui-select-match>\n        <ui-select-choices repeat=\"color.id as color in locals.colors | filter: $select.search\">\n          <span>{{color.name}}</span>\n        </ui-select-choices>\n      </ui-select>\n    </div>\n\n    <div class=\"row\">&nbsp;</div>\n\n    <div class=\"form-group\">\n      <label class=\"control-label\">Multiple Search</label>\n      <ui-select multiple ng-model=\"data.color_ids\">\n        <ui-select-match placeholder=\"{{resources.watermark_multiple}}\">{{$item.name}}</ui-select-match>\n        <ui-select-choices repeat=\"color.id as color in locals.colors | filter: $select.search\">\n          <span>{{color.name}}</span>\n        </ui-select-choices>\n      </ui-select>\n    </div>\n  </div>\n  <hr class=\"kitchen-sink-divider\"/>\n\n  <div ng-controller=\"SearchfieldRemoteTestController\">\n    <h3>Remote Search</h3>\n\n    <div class=\"form-group\">\n      <label class=\"control-label\">Single Search</label>\n      <ui-select ng-model=\"data.address\">\n        <ui-select-match allow-clear placeholder=\"{{resources.watermark_single}}\">{{$select.selected.formatted_address}}</ui-select-match>\n        <ui-select-choices repeat=\"address in locals.singleSearchResults\" refresh=\"locals.addressSearch($select.search, 'single')\" refresh-delay=\"250\">\n          <span>{{address.formatted_address}}</span>\n        </ui-select-choices>\n      </ui-select>\n    </div>\n\n    <div class=\"row\">&nbsp;</div>\n\n    <div class=\"form-group\">\n      <label class=\"control-label\">Multiple Search</label>\n      <ui-select multiple ng-model=\"data.addresses\">\n        <ui-select-match placeholder=\"{{resources.watermark_multiple}}\">{{$item.formatted_address}}</ui-select-match>\n        <ui-select-choices repeat=\"address in locals.multipleSearchResults\" refresh=\"locals.addressSearch($select.search, 'multiple')\" refresh-delay=\"250\">\n          <span>{{address.formatted_address}}</span>\n        </ui-select-choices>\n      </ui-select>\n    </div>\n  </div>\n</form>",
    "example-js": "/*global angular */\n\nangular.module('stache').controller('SearchfieldLocalTestController', ['$scope', function ($scope) {\n    'use strict';\n\n    $scope.data = {\n        color_id: '2',\n        color_ids: ['2', '5', '9']\n    };\n\n    $scope.resources = {\n        watermark_single: 'Search for a color',\n        watermark_multiple: 'Search for a color(s)'\n    };\n    $scope.locals = {\n        colors: [\n            { id: '1', name: 'Aqua' },\n            { id: '2', name: 'Blue' },\n            { id: '3', name: 'Brown' },\n            { id: '4', name: 'Gold' },\n            { id: '5', name: 'Gray' },\n            { id: '6', name: 'Green' },\n            { id: '7', name: 'Navy' },\n            { id: '8', name: 'Pink' },\n            { id: '9', name: 'Purple' },\n            { id: '10', name: 'Silver' },\n            { id: '11', name: 'White' },\n            { id: '12', name: 'Yellow' }\n        ]\n    };\n}]);\n\nangular.module('stache').controller('SearchfieldRemoteTestController', ['$scope', '$http', function ($scope, $http) {\n    'use strict';\n\n    $scope.data = {\n        address: { place_id: 'ChIJ9yZhkfVv_ogRtSl1eM278GI', formatted_address: '2000 Daniel Island Drive, Charleston, SC 29492, USA' },\n        addresses: [\n            { place_id: 'ChIJ9yZhkfVv_ogRtSl1eM278GI', formatted_address: '2000 Daniel Island Drive, Charleston, SC 29492, USA' },\n            { place_id: 'ChIJ37HL3ry3t4kRv3YLbdhpWXE', formatted_address: 'The White House, 1600 Pennsylvania Avenue Northwest, Washington, DC 20500, USA' }\n        ]\n    };\n\n    $scope.resources = {\n        watermark_single: 'Search for an address',\n        watermark_multiple: 'Search for an address(es)'\n    };\n\n    $scope.locals = {\n        singleSearchResults: [],\n        multipleSearchResults: [],\n        addressSearch: function (search, searchType) {\n            //Only call the remote server if the search text is not empty.\n            if (search && search.length > 0) {\n                var params;\n\n                params = {\n                    address: search,\n                    sensor: false\n                };\n\n                return $http.get(\n                    'http://maps.googleapis.com/maps/api/geocode/json',\n                    { params: params }\n                ).then(function (response) {\n                    if (searchType === 'single') {\n                        $scope.locals.singleSearchResults = response.data.results;\n                    } else {\n                        $scope.locals.multipleSearchResults = response.data.results;\n                    }\n\n                    //This event MUST be raised to tell the control that we've received results from the remote server,\n                    //and then control can properly display the \"No results\" message when necessary.\n                    $scope.$broadcast('bbSearchFinished');\n                });\n            }\n        }\n    };\n\n}]);\n",
    "key": "searchfield",
    "icon": "search"
  },
  {
    "id": "module:Tabs",
    "longname": "module:Tabs",
    "summary": "This directive is no longer being maintained. For creating tabs, see the Angular UI Bootstrap tabs directive and use it in conjunction with the Tabscroll and Tabsref components if needed.",
    "name": "Tabs",
    "kind": "module",
    "description": "### *Deprecated* ###\n\nThis directive is no longer being maintained.  For creating tabs, see the [Angular UI Bootstrap](https://angular-ui.github.io/bootstrap/) tabs directive and use it in conjunction with the [Tabscroll](../tabscroll) and [Tabsref](../tabsref) components if needed.\n\n<s>\n### Additional Dependencies ###\n\n - **[jQuery Responsive Tabs](https://github.com/jellekralt/Responsive-Tabs) (1.4.2 or higher)**\n - **[Angular UI Router](https://github.com/angular-ui/ui-router) (0.2.13 or higher)**\n\n---\n\nThe Tabs directive allows for content to be organized into a set of tabs.  The tabs can be grouped together across the tab bar in a `bb-tab-group`.  Within the group,  `bb-tab-group-item` specifies the tab components that can be opened.\n\n### Tab Group Item Settings ###\n\n - `bb-tab-item-header` The name of the tab\n - `bb-tab-item-count` Optional.  The number of items in the tab.\n - `bb-tab-item-header-function` Optional.  A function which can calculate the tab header and item count.\n - `bbTabItemSref` Optional.  Defines the state reference (?) for the tab.\n </s>",
    "deprecated": true,
    "order": 0,
    "example-html": "<div ng-controller=\"TabsTestController\">\n    <bb-tab>\n        <bb-tab-group>\n            <bb-tab-group-item bb-tab-item-header=\"{headerTitle: 'Donors', headerCount: '25'}\">\n                <div>My donors</div>\n            </bb-tab-group-item>\n            <bb-tab-group-item bb-tab-item-header=\"locals.proposalsHeader\" >\n                <div>My proposals</div>\n            </bb-tab-group-item>\n        </bb-tab-group>\n        <bb-tab-group>\n            <bb-tab-group-item bb-tab-item-header=\"'More stuff'\">\n                <div>Part of another tab group</div>\n            </bb-tab-group-item>\n            <bb-tab-group-item bb-tab-item-header=\"locals.delayedHeader\">\n                <div>Part of another tab group</div>\n            </bb-tab-group-item>\n        </bb-tab-group>\n    </bb-tab>\n</div>",
    "example-js": "angular.module('stache').controller('TabsTestController', ['$scope', '$timeout', function ($scope, $timeout) {\n    'use strict';\n\n    $scope.locals = {\n        proposalsHeader: {\n            headerTitle: 'Proposals',\n            headerCount: 13\n        },\n        delayedHeader: null\n    };\n\n    // Simulates loading a tab header from a remote data source.\n    $timeout(function () {\n\n        $scope.locals.delayedHeader = {\n            headerTitle: 'Delayed Header',\n            headerCount: 10000\n        };\n\n    }, 500);\n\n\n}]);\n",
    "key": "tabs",
    "icon": "archive"
  },
  {
    "id": "module:Tabscroll",
    "longname": "module:Tabscroll",
    "summary": "The bb-tab-scroll directive causes the row of tabs to be horizontally scrollable when the width of the tabs exceeds the width of its container.",
    "name": "Tabscroll",
    "kind": "module",
    "description": "### Additional Dependencies ###\n\nThe `bb-tab-scroll` directive causes the row of tabs to be horizontally scrollable when the width of the tabs exceeds the width of its container.  The tabs are also animated to indicate to the user that they can be scrolled.\n\n### Tab Scroll Settings ###\n\n - `bb-tab-scroll-ready` Used to indicate the tabs are ready to be animated.  This should be used when the tabs are loaded dynamically based on some asynchronous logic like loading data from a web server.",
    "order": 0,
    "example-html": "<div ng-controller=\"TabscrollTestController\">\n  <tabset bb-tab-scroll bb-tab-scroll-ready=\"locals.ready\">\n    <tab heading=\"Tab 1\">\n      Content\n    </tab>\n    <tab>\n      <tab-heading>\n        Tab With Count\n        <span class=\"bb-tab-header-count\">2</span>\n      </tab-heading>\n      Content\n    </tab>\n    <tab heading=\"Tab 3\">\n      Content\n    </tab>\n    <tab class=\"bb-tab-spacer\"></tab>\n    <tab heading=\"Tab 4\">\n      Content\n    </tab>\n    <tab heading=\"Tab 5\">\n      Content\n    </tab>\n    <tab heading=\"Tab 6\">\n      Content\n    </tab>\n    <tab heading=\"Tab 7\">\n      Content\n    </tab>\n  </tabset>\n  <br />\n  <button class=\"btn btn-primary\" ng-click=\"locals.replay()\">Replay animation</button>\n</div>\n",
    "example-js": "angular.module('stache').controller('TabscrollTestController', ['$scope', '$timeout', function ($scope, $timeout) {\n    $scope.locals = {\n        replay: function () {\n            $scope.locals.ready = false;\n            $timeout(function () {\n                $scope.locals.ready = true;\n            }, 200);\n        }\n    };\n\n    $timeout(function () {\n        $scope.locals.ready = true;\n    }, 2000);\n}]);\n",
    "key": "tabscroll",
    "icon": "arrows-h"
  },
  {
    "id": "module:Tabsref",
    "longname": "module:Tabsref",
    "summary": "The Tab Sref directive adds the ability to change the page's URL when the user clicks a tab.",
    "name": "Tabsref",
    "kind": "module",
    "description": "### Additional Dependencies ###\n\n - **[Angular UI Router](https://github.com/angular-ui/ui-router) (0.2.13 or higher)**\n\n---\n\nThe Tab Sref directive adds the ability to change the page's URL when the user clicks a tab.  This also allows for users to navigate straight to a selected tab from a hyperlink.\n\n### Tab Sref Settings ###\n\n - `bb-tab-sref` The name of the state where the application should navigate when the tab is selected.",
    "order": 0,
    "example-html": "<div ng-controller=\"TabSrefTestController\">\n  <tabset>\n    <tab heading=\"Tab 1\" active=\"tab1Active\" bb-tab-sref=\"TabState1\">\n      Content\n    </tab>\n    <tab heading=\"Tab 2\" active=\"tab2Active\" bb-tab-sref=\"TabState2\">\n      Content\n    </tab>\n    <tab heading=\"Tab 3\" active=\"tab3Active\" bb-tab-sref=\"TabState3\">\n      Content\n    </tab>\n  </tabset>\n</div>",
    "example-js": "angular.module('stache')\n      .config(['$stateProvider', function ($stateProvider) {\n        $stateProvider\n            .state('TabState1', {\n                url: 'tabsref'\n            })\n            .state('TabState2', {\n                url: 'tabsref/tab2'\n            })\n            .state('TabState3', {\n                url: 'tabsref/tab3'\n            })\n    }])\n    .controller('TabSrefTestController', ['$scope', function ($scope) {\n        'use strict';\n\n    }]);\n",
    "key": "tabsref",
    "icon": "link"
  },
  {
    "id": "module:Templating",
    "longname": "module:Templating",
    "summary": "The Templating directives allow you to place formatted text inside a tokenized string template.",
    "name": "Templating",
    "kind": "module",
    "description": "The Templating directives allow you to place formatted text inside a tokenized string template.  This avoids the need to build HTML manually on the server or in a custom directive where HTML injection bugs are common.\nThe string template is specified with the `bb-template` attribute, and child elements with the `bb-template-item` attribute are the elements that contain the formatted text.\n\n### Template Settings ###\n\n - `bb-template` The tokenized string that represents the template.  Tokens use the {n} notation where n is the ordinal of the item to replace the token.",
    "order": 0,
    "example-html": "<div ng-controller=\"TemplateTestController\">\n  <span bb-template=\"locals.template\">\n    <strong bb-template-item style=\"font-size: 18px;\">{{locals.number1}}</strong>\n    <strong bb-template-item style=\"font-size: 16px;\">{{locals.number2}}</strong>\n  </span>\n</div>",
    "example-js": "angular.module('stache').controller('TemplateTestController', ['$scope', function ($scope) {\n    $scope.locals = {\n        template: '{0} is an important number. {1} is important, too, but not as important as {0}.',\n        number1: '39,210',\n        number2: '78'\n    };\n}]);\n",
    "key": "templating",
    "icon": "building-o"
  },
  {
    "id": "module:Textexpand",
    "longname": "module:Textexpand",
    "summary": "The Text Expand directive truncates long text with an ellipsis and a \"Read more\" link that allows the user to fully expand the text.",
    "name": "Textexpand",
    "kind": "module",
    "description": "The Text Expand directive truncates long text with an ellipsis and a \"Read more\" link that allows the user to fully expand the text.  If the text length falls below the specified threshold then no action is taken.\n\nNote that collapsed text will have newlines removed.  Also, if one or more newlines are detected, the text is automatically collapsed regardless of the total length of the text.\n\n### Text Expand Settings ###\n\n - `bb-text-expand` The text to truncate.\n - `bb-text-expand-max-length` *(Default: 200)* The number of characters to show before truncating the text.  The directive will attempt to look back up to 10 characters for a space and truncate there in order to avoid truncating in the middle of a word.\n\nThe Text Expand Repeater directive truncates a list of repeater items and will initially display a set number of items.  Any items over the set maximum limit are hidden until the user elects to expand the list.\n\n### Text Expand Repeater Settings ###\n\n- `bb-text-expand-repeater-max` The maximum number of items to show before truncating the repeater list.\n- `bb-text-expand-repeater-data` The name of the property containing the repeater data.",
    "order": 0,
    "example-html": "<div ng-controller=\"ReadMoreTestController\">\n  <h3>Text expand</h3>\n  <div bb-text-expand=\"locals.longText\" style=\"white-space: pre-wrap\"></div>\n  <div class=\"row\">&nbsp;</div>\n  <h3>Text expand repeater</h3>\n  <ul bb-text-expand-repeater bb-text-expand-repeater-max=\"2\" bb-text-expand-repeater-data=\"locals.repeaterData\">\n    <li ng-repeat=\"item in locals.repeaterData\">\n      <span>{{item.text}}</span>\n    </li>\n  </ul>\n</div>",
    "example-js": "/*jslint browser: true, plusplus: true */\n/*global angular */\n\nangular.module('stache')\n    .controller('ReadMoreTestController', ['$scope', function ($scope) {\n        'use strict';\n\n        $scope.locals = {\n            longText: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n            repeaterData: [{ text: 'Repeater item 1' }, { text: 'Repeater item 2' }, { text: 'Repeater item 3' }, { text: 'Repeater item 4' }, { text: 'Repeater item 5' }]\n            //longText: 'a\\nb'\n        };\n    }]);\n",
    "key": "textexpand",
    "icon": "text-height"
  },
  {
    "id": "module:Tiles",
    "longname": "module:Tiles",
    "summary": "The bb-tile directive creates a collapsible container and is the bulding block for pages and forms in a Sky application.",
    "name": "Tiles",
    "kind": "module",
    "description": "The `bb-tile` directive creates a collapsible container and is the bulding block for pages and forms in a Sky application.  The `bb-tile-section` directive is used to create padded sections inside a `bb-tile` element. Additionally, the `bb-tile-header-content` directive may be placed inside the `bb-tile` directive to add summary information to the tile.  If you simply need to show a check mark indicating the tile has data, you can add a `bb-tile-header-check` element to the `bb-tile-header-content` element.\n\nWhen used on forms, it automatically adjusts the background color on the form and shrinks the tile header.\n\n### Tile Settings ###\n\n - `bb-tile-header` The header text for the tile.\n - `bb-tile-settings-click` A function to call when the user clicks the settings button (indicated by a wrench icon) in the tile header.  If not specified, the settings button is not displayed.",
    "order": 0,
    "example-html": "<div ng-controller=\"TileTestController\">\n    <h3>Tiles on pages</h3>\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <div style=\"background-color: #f2f2f2; padding: 15px\">\n                <bb-tile bb-tile-header=\"resources.tile_header\" bb-tile-collapsed=\"locals.is_collapsed\" bb-tile-settings-click=\"locals.openSettings()\">\n                    <bb-tile-header-content>\n                        {{123456789 | bbAutonumeric:'money':true}}\n                    </bb-tile-header-content>\n                    <div bb-tile-section>\n                        Test.\n                    </div>\n                </bb-tile>\n        \n                <bb-tile bb-tile-header=\"'Tile with check'\">\n                    <bb-tile-header-content>\n                        <bb-tile-header-check></bb-tile-header-check>\n                    </bb-tile-header-content>\n                    <div bb-tile-section>\n                        Test.\n                    </div>\n                </bb-tile>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"row\">&nbsp;</div>\n\n    <h3>Tiles on forms</h3>\n    <button ng-click=\"open()\">Open</button>\n</div>",
    "example-js": "angular.module('stache').controller('TileTestController', ['bbModal', '$scope', function (bbModal, $scope) {\n    $scope.resources = {\n        tile_header: 'Tile header'\n    };\n\n    $scope.locals = {\n        is_collapsed: false,\n        openSettings: function () {\n            alert('Settings invoked!');\n        }\n    };\n\n    $scope.open = function () {\n        bbModal.open({\n            template: '<bb-modal>' +\n                      '    <div class=\"modal-form\">' +\n                      '        <bb-modal-header bb-modal-help-key=\"\\'bb-security-users.html\\'\">Form Header</bb-modal-header>' +\n                      '        <div bb-modal-body>' +\n                      '            <bb-tile bb-tile-header=\"\\'Tile header\\'\">' +\n                      '                <div bb-tile-section>' +\n                      '                    Test.' +\n                      '                </div>' +\n                      '            </bb-tile>' +\n                      '        </div>' +\n                      '        <bb-modal-footer>' +\n                      '            <bb-modal-footer-button-primary></bb-modal-footer-button-primary>' +\n                      '            <bb-modal-footer-button-cancel></bb-modal-footer-button-cancel>' +\n                      '        </bb-modal-footer>' +\n                      '    </div>' +\n                      '</bb-modal>'\n        });\n    };\n}]);\n",
    "key": "tiles",
    "icon": "th-large"
  },
  {
    "id": "module:Toast",
    "longname": "module:Toast",
    "summary": "The Toast service can be used to launch toats in a consistent way in a Sky application.",
    "name": "Toast",
    "kind": "module",
    "description": "### Additional Dependencies ###\n\n - **[angular-toastr](https://github.com/Foxandxss/angular-toastr) (1.0.0-beta.2 or higher)**\n - **[ng-animate](https://docs.angularjs.org/api/ngAnimate) (optional, 1.3 or higher)**\n\n---\n\nThe Toast service can be used to launch toats in a consistent way in a Sky application.  The service has a single method, `bbToast.open` used to launch a toast.  Optionally include the `ngAnimate` module in the application for toasts to fade in and out.\n\n### Open Configuration Options ##\n\n - `message` Used to provide a basic string message for simple toasts.\n\n - `templateUrl` Url for a template in the `$templateCache`.  Used to provide an HTML template when displaying complex toasts.  Cannot be combined with the `message` option.\n\n - `controller` Used in conjunction with `templateUrl`.  Specifies the name of a controller to apply to the template's scope.\n\n - `resolve` Items that will be resolved and passed to the controller as locals.",
    "order": 0,
    "example-html": "<div ng-controller=\"ToastTestController\">\n  <button ng-click=\"openMessage()\">Open simple message</button>\n  <button ng-click=\"openTemplate()\">Open templated content</button>\n</div>",
    "example-js": "angular.module('stache')\n.controller('ToastTestController', ['$scope', 'bbToast', '$templateCache', function ($scope, bbToast, $templateCache) {\n    $templateCache.put('bbToast/samples/complexToast.html',\n        '<div>' +\n        'Open for <span>{{timeOpen}}</span> seconds' +\n        '</div>' +\n        '<br />' +\n        '<div>{{message}}</div');\n\n    $scope.openMessage = function () {\n        bbToast.open({ message: \"A simple message in which <html> is ignored.\" });\n    };\n\n    $scope.openTemplate = function () {\n        bbToast.open({\n            templateUrl: \"bbToast/samples/complexToast.html\",\n            controller: 'TemplatedToastController',\n            resolve: {\n                message: function () {\n                    return 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed commodo, massa ac sollicitudin vestibulum, nulla nulla faucibus.';\n                }\n            }\n        });\n    };\n}])\n.controller('TemplatedToastController', ['$scope', '$interval', 'message', function ($scope, $interval, message) {\n    $scope.timeOpen = 0;\n    $scope.message = message;\n\n    $interval(function () {\n        $scope.timeOpen += 1;\n    }, 1000);\n}]);\n",
    "key": "toast",
    "icon": "envelop-o"
  },
  {
    "id": "module:Tooltip",
    "longname": "module:Tooltip",
    "summary": "The Tooltip directive enables an HTML-formatted tooltip to be displayed via a trigger element.",
    "name": "Tooltip",
    "kind": "module",
    "description": "The Tooltip directive enables an HTML-formatted tooltip to be displayed via a trigger element.  This directive wraps up the Angular UI Bootstrap Tooltip directive while making it easier\nto define markup in a template rather than directly in the view's controller.\n\n### Tooltip Settings ##\n\nIn addition to all the properties from the [Angular UI Bootstrap Tooltip](http://angular-ui.github.io/bootstrap/) directive, these properties may also be specified:\n\n - `bb-tooltip` URL for a template in the `$templateCache`.  The template HTML may contain bindings to properties in the current scope.\n\n - `tooltip-updater` Optional.  A property on the scope that can be watched by the directive so that when this property's value changes, the contents of the tooltip are refreshed.",
    "order": 0,
    "example-html": "<div ng-controller=\"TooltipTestController\">\n  Want to see a tooltip?  If so, \n    <a href=\"\" bb-tooltip=\"bbTooltip/samples/sampletooltip.html\" tooltip-placement=\"top\" tooltip-trigger=\"focus\" tooltip-append-to-body=\"true\">click here</a>.\n\n</div>",
    "example-js": "/*global angular */\n(function () {\n    'use strict';\n    angular.module('stache')\n    .run(['$templateCache', function ($templateCache) {\n        // Typically this would either point to a URL or generated using a Grunt task like html2js.  For demo\n        // purposes we'll just manually put the template in the cache.\n        $templateCache.put('bbTooltip/samples/sampletooltip.html',\n            '<div>' +\n                '<div class=\"bb-tooltip-title\">' +\n                    '{{tooltipTitle}}' +\n                    '<hr />' +\n                '</div>' +\n                '<div>{{tooltipMessage}}</div>' +\n            '</div>');\n    }])\n    .controller('TooltipTestController', ['$scope', function ($scope) {\n        $scope.tooltipTitle = 'Tooltip title';\n        $scope.tooltipMessage = 'Tooltip content.';\n    }]);\n}());\n\n",
    "key": "tooltip",
    "icon": "info"
  },
  {
    "id": "module:Utilities",
    "longname": "module:Utilities",
    "summary": "The utilities module provides two methods for encoding URI components and formatting arguments.",
    "name": "Utilities",
    "kind": "module",
    "description": "The sky utilities module gives you the following angular filters:\n\n  - `encodeURIComponent` Uses the $window.encodeURIComponent function on your string\n  - `format` Formats the args with a given format string",
    "order": 0,
    "example-html": "<div ng-controller=\"UtilitiesController\">\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <div class=\"input-group\">\n                <label for=\"formatFilter\">Enter Some Text</label>\n                <input class=\"form-control\" type=\"text\" name=\"formatFilter\" ng-model=\"locals.formattedText\" />\n            </div>\n            <div>Formatted result is: {{'*{0}{0}*' | format:locals.formattedText}}</div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <div class=\"input-group\">\n                <label for=\"encodeURIFilter\">Enter URI to encode</label>\n                <input class=\"form-control\" type=\"text\" name=\"encodeURIFilter\" ng-model=\"locals.encodedText\" />\n            </div>\n            <div>Encoded result is: {{locals.encodedText | encodeURIComponent}}</div>\n        </div>\n    </div>\n</div>",
    "example-js": "/*global angular */\n(function () {\n    'use strict';\n    \n    angular.module('stache')\n    .controller('UtilitiesController', ['$scope',\n        function ($scope) {\n            $scope.locals = {\n                formattedText: '',\n                encodedText: 'amp=&'\n            };\n            \n        }]);\n}());",
    "key": "utilities",
    "icon": "gear"
  },
  {
    "id": "module:Validation",
    "longname": "module:Validation",
    "summary": "The email validation directive allows you to validate email strings in input fields.",
    "name": "Validation",
    "kind": "module",
    "description": "The email validation directive allows you to validate email strings in input fields.\n\n### Email Validation Settings ###\n\n- `ng-model` An object to bind the email value to on the input.\n- `type=email` indicates that email validation can be used.",
    "order": 0,
    "example-html": "<div ng-controller=\"ValidationTestController\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"tile-form\">\n                <form name=\"validationTest\">\n                    <div class=\"form-group\">\n                        <div class=\"input-group\">\n                            <label for=\"testField1\">Type in email here: </label>\n                            <input class=\"form-control\" type=\"email\" name=\"testField1\" ng-model=\"locals.email\" bb-email-validation />\n                            <label class=\"error\" ng-show=\"validationTest.testField1.$dirty && validationTest.testField1.$error.email\">\n                            Invalid Email format!\n                            </label>\n                        </div>\n                    </div>        \n                </form>\n            </div>\n        </div>\n    </div>\n    \n</div>",
    "example-js": "/*global angular */\n\nangular.module('stache')\n    .controller('ValidationTestController', ['$scope', function ($scope) {\n        'use strict';\n\n        $scope.locals = {\n            email: ''\n        };\n\n    }]);\n",
    "key": "validation",
    "icon": "check"
  },
  {
    "id": "module:Wait",
    "longname": "module:Wait",
    "summary": "The Wait directive allows you to disable and visually indicate that an element is in a waiting state.",
    "name": "Wait",
    "kind": "module",
    "description": "### Additional Dependencies ###\n\n - **[jquery.blockUI.js](http://malsup.com/jquery/block/) (2.66.0-2013.10.09 or higher)**\n\n---\n\nThe Wait directive allows you to disable and visually indicate that an element is in a waiting state.\nIf the value bound to `bb-wait` is truthy, then the element will begin waiting until the value becomes falsey.\n\nWhen `bb-wait` is set to true, the element will initially be blocked with a clear mask, but after 300ms a visual indicator will cover the element as well.\nThis will allow for the element to immediately be disabled but not cause visual disturbances for very brief waits.\n\n### Multiple Waits ###\nYou can set the value of `bb-wait` to a numeric value to track a count of simultaneous waits.\nWhen waits are added, increment the wait count and when they are removed then decrement the count.\nThis will cause the wait UI to only clear once all waits are removed.\n\n### Full Page Waits ###\nIf bb-wait is added to the `<body>` tag, then a full-page version of the wait UI will be created.\n\n### Raising Wait Events ###\nWait events can be raised from one controller to another by calling `$scope.$emit(\"bbBeginWait\");` and `$scope.$emit(\"bbEndWait\");` respectively.\nA controller can capture that event and begin waiting its element by listening for the event and updating its own bb-wait directive.\nWhen doing so, itshould call `stopPropagation()` on the event so that other parents won't catch it as well.\nUncaught events will raise all the way to the main controller of the application which can cause the entire page to wait.\n\n    $scope.$on(\"bbBeginWait\", function (event) {\n        event.stopPropagation();\n        $scope.myElementWaitCount += 1;\n    });\n\n### Wait Service ###\nIn addition to the `bb-wait` directive, a `bbWait` service exists to allow functional access to adding and removing waits on elements or the page as a whole.\nThis service supports the following functions\n\n - `beginElWait(element)` - Adds a wait for the specified element. Implicitly tracks a wait count for the element.\n - `endElWait(element)` - Removes a wait for the specified element. Implicitly tracks a wait count for the element and clears the wait UI when the count is 0.\n - `clearElWait(element)` - Removes all waits for the specified element and will clear any wait UI.\n - `beginPageWait()` - Adds a wait for the whole page (same as body element). Implicitly tracks a wait count for the element.\n - `endPageWait()` - Removes a wait for the whole page (same as body element). Implicitly tracks a wait count for the element and clears the wait UI when the count is 0.\n - `clearPageWait()` - Removes all waits for the whole page (same as body element) and will clear any wait UI.",
    "order": 0,
    "example-html": "<div ng-controller=\"WaitDemoController\">\n\n    <div>\n        <button ng-click=\"onWaitDiv()\" style=\"float: left;\">Wait Div</button>\n        <div bb-wait=\"waitDiv\" style=\"height:200px; width: 300px; border: solid 1px red; float: left; margin-left: 10px\">\n            A large area that needs to be waited.\n        </div>\n    </div>\n\n    <div style=\"float: left; margin-top: 10px; clear:both;\">\n        <button ng-click=\"onWaitSpan()\">Wait Span</button>\n        <span bb-wait=\"waitSpan\">Some simple text that needs to be waited.</span>\n    </div>\n\n    <div style=\"float: left; margin-top: 10px; clear:both;\">\n        <div style=\"float: left;\">\n            <button ng-click=\"onWaitIncrement()\" style=\"width:150px\">Wait Increment</button>\n            <br />\n            <button ng-click=\"onWaitDecrement()\" style=\"width:150px\">Wait Decrement</button>\n        </div>\n        <div bb-wait=\"waitCount\" style=\"height: 100px; width: 100px; border: solid 1px red; float: left; margin-left: 10px; font-size: 18px; font-weight: bold;\">\n            {{waitCount}}\n        </div>\n    </div>\n\n    <div style=\"float: left; margin-top: 10px; clear:both;\">\n        <button ng-click=\"onShowPageWait()\">Show Page Wait</button>\n    </div>\n\n    <div style=\"float: left; margin-top: 10px; clear:both;\">\n        <button ng-click=\"onShowNonblockingPageWait()\">Show Nonblocking Page Wait</button>\n    </div>\n\n    <div style=\"float: left; margin-top: 10px; clear:both;\">\n        <div style=\"float: left;\">\n            Default value of waiting\n        </div>\n        <div bb-wait=\"{{true}}\" style=\"height: 100px; width: 100px; border: solid 1px red; float: left; margin-left: 10px; font-size: 18px; font-weight: bold;\">\n        </div>\n    </div>\n\n</div>",
    "example-js": "angular.module('stache')\n    .controller('WaitDemoController', ['$scope', '$timeout', 'bbWait', function ($scope, $timeout, bbWait) {\n\n        $scope.waitCount = 0;\n\n        $scope.onWaitDiv = function () {\n            $scope.waitDiv = true;\n\n            $timeout(function () {\n                $scope.waitDiv = false;\n            }, 1000);\n        };\n\n        $scope.onWaitSpan = function () {\n            $scope.waitSpan = true;\n\n            $timeout(function () {\n                $scope.waitSpan = false;\n            }, 1000);\n        };\n\n        $scope.onWaitIncrement = function () {\n            $scope.waitCount += 1;\n        };\n\n        $scope.onWaitDecrement = function () {\n            if ($scope.waitCount > 0) {\n                $scope.waitCount -= 1;\n            }\n        };\n\n        $scope.onShowPageWait = function () {\n            $scope.$emit(\"bbBeginWait\");\n\n            $timeout(function () {\n                $scope.$emit(\"bbEndWait\");\n            }, 1000);\n        };\n\n        $scope.onShowNonblockingPageWait = function () {\n            $scope.$emit(\"bbBeginWait\", { nonblocking: true });\n\n            $timeout(function () {\n                $scope.$emit(\"bbEndWait\", { nonblocking: true });\n            }, 1000);\n        };\n\n    }]);\n",
    "key": "wait",
    "icon": "spinner"
  },
  {
    "id": "module:Window",
    "longname": "module:Window",
    "summary": "The windows services provides two helper methods, used for obtaining scrollbar width and setting the page title.",
    "name": "Window",
    "kind": "module",
    "description": "An angular service with the following functions:\n\n  - `setWindowTitle(title)` Changes the browser window's title. If a product name is specified in `bbWindowConfig`, then the product name will be appended to the passed title.\n  - `getScrollbarWidth` Calculates and returns the width of the scrollbar for the current browser.",
    "order": 0,
    "example-html": "<div ng-controller=\"WindowServiceController\">\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <label>Change Window Title</label>\n            <input ng-model=\"locals.windowTitle\" ng-model-options=\"{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }\"/>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <div>Current browser scrollbar width is: {{locals.scrollbarWidth}}px</div>\n        </div>\n    </div>\n</div>",
    "example-js": "/*global angular */\n\n(function () {\n    'use strict';\n    \n    angular.module('stache')\n    .controller('WindowServiceController', ['$scope', 'bbWindow', function ($scope, bbWindow) {\n        $scope.locals = {\n            windowTitle: '',\n            scrollbarWidth: null\n        };\n        \n        $scope.locals.scrollbarWidth = bbWindow.getScrollbarWidth();\n        \n        $scope.$watch('locals.windowTitle', function () {\n            if ($scope.locals.windowTitle) {\n                bbWindow.setWindowTitle($scope.locals.windowTitle);\n            }\n        });\n        \n    }]);\n}());",
    "key": "window",
    "icon": "desktop"
  },
  {
    "id": "module:Wizard",
    "longname": "module:Wizard",
    "summary": "Wizards are used on a modal form when the user needs to perform a set of pre-defined steps in a particular order.",
    "name": "Wizard",
    "kind": "module",
    "description": "Wizards are used on a modal form when the user needs to perform a set of pre-defined steps in a particular order.  The Sky Wizard works in conjunction with the [Angular UI Bootstrap](http://angular-ui.github.io/bootstrap/) tabs component.  Placing the `bb-wizard` directive on a UI Bootstrap `tabset` element will cause the tabs to look and behave like a Sky wizard.\n\nSky Wizards also have the concept of a completed step which is denoted by the `bb-wizard-step-complete` directive.  When present on a `tab` and bound to a truthy value, the step's tab will be displayed as completed.\n\nFinally there is a `bbWizardNavigator` service that provides some convenience methods for navigating through the wizard's steps.  This will typically be used by wiring the navigator up to your modal's previous and next buttons.\n\nThe `bbWizardNavigator` service has an `init()` function that takes an `options` object with the following properties:\n\n- `steps` An array of steps. Each step should have the following properties:\n\n\n - `active` Indicates whether the step is the currently active step.  This should be the same property that is bound to the UI Bootstrap `tab` directive's `active` property.\n - `disabled()` A function that returns a boolean indicating whether the tab is disabled.  This should be the same function that is bound to the UI Bootstrap `tab` directive's `disabled` property.\n - `complete()` A function that returns a boolean indicating whether the tab is complete.  This should be the same function that is bound to the tab's `bb-wizard-step-complete` property.\n\nThe `bbWizardNavigator` also exposes the following methods:\n\n- `previousText()` Returns the text for the modal's Previous button.  This usually doesn't change while the user interacts with the widget.\n- `nextText()` Returns the text for the modal's Next button.  This changes to \"Finish\" when the user is on the last step.\n- `goToPrevious()` Navigates the user to the previous step.\n- `goToNext()` Navigates the user to the next step.\n- `previousDisabled()` Indicates whether the previous step is disabled.  This should be bound to the `ng-disabled` property of the modal's Previous button.\n- `nextDisabled()` Indicates whether the next step is disabled.  This should be bound to the `ng-disabled` property of the modal's Next button.",
    "order": 0,
    "example-html": "<div ng-controller=\"WizardTestController\">\n  <button class=\"btn btn-primary\" ng-click=\"locals.openForm()\">Open wizard</button>\n</div>\n\n<script type=\"text/ng-template\" id=\"demo/wizard/wizardform.html\">\n  <bb-modal>\n    <div class=\"modal-form\" ng-controller=\"WizardTestModalController\">\n      <bb-modal-header>Wizard example</bb-modal-header>\n      <form ng-submit=\"locals.save()\">\n        <div bb-modal-body>\n          <tabset bb-wizard>\n            <tab ng-repeat=\"step in locals.steps\" heading=\"{{step.heading}}\" active=\"step.active\" disabled=\"step.disabled()\" bb-wizard-step-complete=\"step.complete()\">\n              <ng-include src=\"step.templateUrl\"></ng-include>\n            </tab>\n          </tabset>\n        </div>\n        <bb-modal-footer>\n          <bb-modal-footer-button ng-click=\"locals.wizardNav.goToPrevious()\" ng-disabled=\"locals.wizardNav.previousDisabled()\">{{locals.wizardNav.previousText()}}</bb-modal-footer-button>\n          <bb-modal-footer-button-primary ng-click=\"locals.wizardNav.goToNext()\" ng-disabled=\"locals.wizardNav.nextDisabled()\">{{locals.wizardNav.nextText()}}</bb-modal-footer-button-primary>\n          <bb-modal-footer-button>Save and Close</bb-modal-footer-button>\n          <bb-modal-footer-button-cancel></bb-modal-footer-button-cancel>\n        </bb-modal-footer>\n      </form>\n    </div>\n  </bb-modal>\n</script>\n\n<script type=\"text/ng-template\" id=\"demo/wizard/step1.html\">\n  <div class=\" form-group\">\n    <label>Enter text here to continue.</label>\n    <input type=\"text\" class=\"form-control\" ng-model=\"locals.requiredValue1\" />\n  </div>\n</script>\n\n<script type=\"text/ng-template\" id=\"demo/wizard/step2.html\">\n  <div class=\" form-group\">\n    <label>\n      <input type=\"checkbox\" bb-check ng-model=\"locals.requiredValue2\" />\n      Check this box to enable step 3.\n    </label>\n  </div>\n</script>\n\n<script type=\"text/ng-template\" id=\"demo/wizard/step3.html\">\n  <div class=\" form-group\">\n    Some other content.\n  </div>\n</script>",
    "example-js": "angular.module('stache')\n    .controller('WizardTestController', ['$scope', 'bbModal', function ($scope, bbModal) {\n        $scope.locals = {\n            openForm: function () {\n                bbModal.open({\n                    templateUrl: 'demo/wizard/wizardform.html'\n                });\n            }\n        };\n    }])\n    .controller('WizardTestModalController', ['$scope', '$window', 'bbWizardNavigator', function ($scope, $window, bbWizardNavigator) {\n        var steps,\n            wizardNav;\n\n        steps = [\n            {\n                heading: '1. Step 1',\n                templateUrl: 'demo/wizard/step1.html',\n                complete: function () {\n                    return !!$scope.locals.requiredValue1;\n                },\n                active: true\n            },\n            {\n                heading: '2. Step 2',\n                templateUrl: 'demo/wizard/step2.html',\n                complete: function () {\n                    return !!$scope.locals.requiredValue2;\n                },\n                disabled: function () {\n                    return !$scope.locals.requiredValue1;\n                }\n            },\n            {\n                heading: '3. Step 3',\n                templateUrl: 'demo/wizard/step3.html',\n                complete: function () {\n                    return !!$scope.locals.requiredValue3;\n                },\n                disabled: function () {\n                    return !$scope.locals.requiredValue1 || !$scope.locals.requiredValue2;\n                }\n            }\n        ];\n\n        wizardNav = bbWizardNavigator.init(\n            {\n                steps: steps,\n                finish: function () {\n                    $window.alert('Finished!');\n                }\n            }\n        );\n\n        $scope.locals = {\n            steps: steps,\n            wizardNav: wizardNav,\n            firstStepComplete: function () {\n                return !!$scope.locals.requiredValue1;\n            },\n            secondStepComplete: function () {\n                return !!$scope.locals.requiredValue2;\n            }\n        };\n    }]);\n",
    "key": "wizard",
    "icon": "magic"
  }
]